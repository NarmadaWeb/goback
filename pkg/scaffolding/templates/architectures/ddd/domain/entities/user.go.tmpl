package entities

import (
	"time"
	"errors"

	{{- if eq .Database "postgresql" }}
	"github.com/google/uuid"
	{{- end}}
)

// UserID adalah tipe unik untuk ID User.
{{- if eq .Database "postgresql" }}
type UserID uuid.UUID
{{- else }}
type UserID int64
{{- end}}


// User adalah entitas utama dalam domain kita.
type User struct {
	ID        UserID    `json:"id"`
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Password  string    `json:"-"` // Password tidak pernah di-expose
	IsActive  bool      `json:"is_active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// NewUser adalah 'factory' untuk membuat entitas User baru.
// Ini memastikan bahwa setiap user yang dibuat berada dalam kondisi yang valid.
func NewUser(name, email, password string) (*User, error) {
	if name == "" {
		return nil, errors.New("user name cannot be empty")
	}
	if email == "" {
		return nil, errors.New("user email cannot be empty")
	}
	// Validasi lain bisa ditambahkan di sini

	var userID UserID
	{{- if eq .Database "postgresql" }}
	userID = UserID(uuid.New())
	{{- end}}

	return &User{
		ID:        userID,
		Name:      name,
		Email:     email,
		Password:  password, // Seharusnya sudah di-hash sebelum sampai sini
		IsActive:  true,     // Default user baru aktif
		CreatedAt: time.Now().UTC(),
		UpdatedAt: time.Now().UTC(),
	}, nil
}

// ChangePassword adalah contoh metode domain.
func (u *User) ChangePassword(newPasswordHash string) {
	u.Password = newPasswordHash
	u.UpdatedAt = time.Now().UTC()
}

// Deactivate adalah contoh lain dari metode domain.
func (u *User) Deactivate() {
	u.IsActive = false
	u.UpdatedAt = time.Now().UTC()
}

// Activate mengaktifkan user.
func (u *User) Activate() {
	u.IsActive = true
	u.UpdatedAt = time.Now().UTC()
}