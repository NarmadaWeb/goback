package services

import (
	"errors"
	"time"

	"{{.ModulePath}}/domain"
	"{{.ModulePath}}/ports"
	"golang.org/x/crypto/bcrypt"

	{{if eq .Database "postgresql"}}
	"github.com/google/uuid"
	{{end}}
)

type userService struct {
	userRepo ports.UserRepository
}

func NewUserService(userRepo ports.UserRepository) ports.UserService {
	return &userService{userRepo: userRepo}
}

func (s *userService) CreateUser(name, email, password string) (*domain.User, error) {
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return nil, err
	}

	user := &domain.User{
		{{if eq .Database "postgresql"}}
		ID:        uuid.New(),
		{{end}}
		Name:      name,
		Email:     email,
		Password:  string(hashedPassword),
		IsActive:  true,
		CreatedAt: time.Now(),
		UpdatedAt: time.Now(),
	}

	err = s.userRepo.Create(user)
	if err != nil {
		return nil, err
	}

	return user, nil
}

{{if eq .Database "postgresql"}}
func (s *userService) GetUser(id uuid.UUID) (*domain.User, error) {
{{else}}
func (s *userService) GetUser(id uint) (*domain.User, error) {
{{end}}
	return s.userRepo.GetByID(id)
}


func (s *userService) GetAllUsers(page, perPage int) ([]*domain.User, int64, error) {
	return s.userRepo.GetAll(page, perPage)
}

{{if eq .Database "postgresql"}}
func (s *userService) UpdateUser(id uuid.UUID, name, email *string) (*domain.User, error) {
{{else}}
func (s *userService) UpdateUser(id uint, name, email *string) (*domain.User, error) {
{{end}}
	user, err := s.userRepo.GetByID(id)
	if err != nil {
		return nil, err
	}
	if user == nil {
		return nil, errors.New("user not found")
	}

	if name != nil {
		user.Name = *name
	}
	if email != nil {
		user.Email = *email
	}
	user.UpdatedAt = time.Now()

	err = s.userRepo.Update(id, user)
	if err != nil {
		return nil, err
	}
	return user, nil
}

{{if eq .Database "postgresql"}}
func (s *userService) DeleteUser(id uuid.UUID) error {
{{else}}
func (s *userService) DeleteUser(id uint) error {
{{end}}
	return s.userRepo.Delete(id)
}
