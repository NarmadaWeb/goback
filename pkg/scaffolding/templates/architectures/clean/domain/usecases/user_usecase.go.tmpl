package usecases

import (
	"context"
	"errors"
	"{{.ModulePath}}/domain/entities"
	{{- if eq .Database "postgresql" }}
	"github.com/google/uuid"
	{{- end}}
)

// UserRepository defines the contract for user data access in use cases
type UserRepository interface {
	{{- if eq .Database "postgresql" }}
	GetByID(ctx context.Context, id uuid.UUID) (*entities.User, error)
	{{- else}}
	GetByID(ctx context.Context, id uint) (*entities.User, error)
	{{- end}}
	GetByEmail(ctx context.Context, email string) (*entities.User, error)
	GetAll(ctx context.Context, page, perPage int) ([]*entities.User, int64, error)
	Create(ctx context.Context, user *entities.User) error
	{{- if eq .Database "postgresql" }}
	Update(ctx context.Context, id uuid.UUID, user *entities.User) error
	Delete(ctx context.Context, id uuid.UUID) error
	{{- else}}
	Update(ctx context.Context, id uint, user *entities.User) error
	Delete(ctx context.Context, id uint) error
	{{- end}}
	Search(ctx context.Context, query string, page, perPage int) ([]*entities.User, int64, error)
	ExistsByEmail(ctx context.Context, email string) (bool, error)
}

// UserUsecase contains the application business rules
type UserUsecase struct {
	userRepo UserRepository
}

// NewUserUsecase creates a new user usecase
func NewUserUsecase(userRepo UserRepository) *UserUsecase {
	return &UserUsecase{
		userRepo: userRepo,
	}
}

// CreateUser use case for creating a new user
func (uc *UserUsecase) CreateUser(ctx context.Context, name, email, password string) (*entities.User, error) {
	// Check if user already exists
	exists, err := uc.userRepo.ExistsByEmail(ctx, email)
	if err != nil {
		return nil, err
	}
	if exists {
		return nil, errors.New("user with this email already exists")
	}

	// Create new user entity
	user, err := entities.NewUser(name, email, password)
	if err != nil {
		return nil, err
	}

	// Save user
	if err := uc.userRepo.Create(ctx, user); err != nil {
		return nil, err
	}

	return user, nil
}

// GetUser use case for retrieving a user by ID
{{- if eq .Database "postgresql" }}
func (uc *UserUsecase) GetUser(ctx context.Context, id uuid.UUID) (*entities.User, error) {
{{- else}}
func (uc *UserUsecase) GetUser(ctx context.Context, id uint) (*entities.User, error) {
{{- end}}
	user, err := uc.userRepo.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}
	if user == nil {
		return nil, errors.New("user not found")
	}
	return user, nil
}

// GetUserByEmail use case for retrieving a user by email
func (uc *UserUsecase) GetUserByEmail(ctx context.Context, email string) (*entities.User, error) {
	user, err := uc.userRepo.GetByEmail(ctx, email)
	if err != nil {
		return nil, err
	}
	if user == nil {
		return nil, errors.New("user not found")
	}
	return user, nil
}

// GetAllUsers use case for retrieving all users with pagination
func (uc *UserUsecase) GetAllUsers(ctx context.Context, page, perPage int) ([]*entities.User, int64, error) {
	// Apply business rules for pagination
	if page <= 0 {
		page = 1
	}
	if perPage <= 0 {
		perPage = 10
	}
	if perPage > 100 {
		perPage = 100
	}

	return uc.userRepo.GetAll(ctx, page, perPage)
}

// SearchUsers use case for searching users
func (uc *UserUsecase) SearchUsers(ctx context.Context, query string, page, perPage int) ([]*entities.User, int64, error) {
	if query == "" {
		return uc.GetAllUsers(ctx, page, perPage)
	}

	// Apply business rules for pagination
	if page <= 0 {
		page = 1
	}
	if perPage <= 0 {
		perPage = 10
	}
	if perPage > 100 {
		perPage = 100
	}

	return uc.userRepo.Search(ctx, query, page, perPage)
}

// UpdateUser use case for updating user information
{{- if eq .Database "postgresql" }}
func (uc *UserUsecase) UpdateUser(ctx context.Context, id uuid.UUID, name, email, password *string, age *int, phone, address *string, isActive *bool) (*entities.User, error) {
{{- else}}
func (uc *UserUsecase) UpdateUser(ctx context.Context, id uint, name, email, password *string, age *int, phone, address *string, isActive *bool) (*entities.User, error) {
{{- end}}
	// Get existing user
	user, err := uc.userRepo.GetByID(ctx, id)
	if err != nil {
		return nil, err
	}
	if user == nil {
		return nil, errors.New("user not found")
	}

	// Update name if provided
	if name != nil {
		if err := user.UpdateName(*name); err != nil {
			return nil, err
		}
	}

	// Update email if provided and different
	if email != nil && *email != user.Email {
		// Check if new email is already taken
		exists, err := uc.userRepo.ExistsByEmail(ctx, *email)
		if err != nil {
			return nil, err
		}
		if exists {
			return nil, errors.New("email already taken")
		}

		if err := user.UpdateEmail(*email); err != nil {
			return nil, err
		}
	}

	// Update password if provided
	if password != nil {
		if err := user.UpdatePassword(*password); err != nil {
			return nil, err
		}
	}

	// Update age if provided
	if age != nil {
		if err := user.UpdateAge(*age); err != nil {
			return nil, err
		}
	}

	// Update phone if provided
	if phone != nil {
		user.UpdatePhone(*phone)
	}

	// Update address if provided
	if address != nil {
		user.UpdateAddress(*address)
	}

	// Update active status if provided
	if isActive != nil {
		if *isActive {
			user.Activate()
		} else {
			user.Deactivate()
		}
	}

	// Save updated user
	if err := uc.userRepo.Update(ctx, id, user); err != nil {
		return nil, err
	}

	// Return updated user
	return uc.userRepo.GetByID(ctx, id)
}

// DeleteUser use case for deleting a user
{{- if eq .Database "postgresql" }}
func (uc *UserUsecase) DeleteUser(ctx context.Context, id uuid.UUID) error {
{{- else}}
func (uc *UserUsecase) DeleteUser(ctx context.Context, id uint) error {
{{- end}}
	// Check if user exists
	user, err := uc.userRepo.GetByID(ctx, id)
	if err != nil {
		return err
	}
	if user == nil {
		return errors.New("user not found")
	}

	// Business rule: Deactivate user before deletion
	if user.IsActive {
		user.Deactivate()
		if err := uc.userRepo.Update(ctx, id, user); err != nil {
			return err
		}
	}

	return uc.userRepo.Delete(ctx, id)
}

// ActivateUser use case for activating a user account
{{- if eq .Database "postgresql" }}
func (uc *UserUsecase) ActivateUser(ctx context.Context, id uuid.UUID) error {
{{- else}}
func (uc *UserUsecase) ActivateUser(ctx context.Context, id uint) error {
{{- end}}
	user, err := uc.userRepo.GetByID(ctx, id)
	if err != nil {
		return err
	}
	if user == nil {
		return errors.New("user not found")
	}

	user.Activate()
	return uc.userRepo.Update(ctx, id, user)
}

// DeactivateUser use case for deactivating a user account
{{- if eq .Database "postgresql" }}
func (uc *UserUsecase) DeactivateUser(ctx context.Context, id uuid.UUID) error {
{{- else}}
func (uc *UserUsecase) DeactivateUser(ctx context.Context, id uint) error {
{{- end}}
	user, err := uc.userRepo.GetByID(ctx, id)
	if err != nil {
		return err
	}
	if user == nil {
		return errors.New("user not found")
	}

	user.Deactivate()
	return uc.userRepo.Update(ctx, id, user)
}

// VerifyUserPassword use case for password verification
{{- if eq .Database "postgresql" }}
func (uc *UserUsecase) VerifyUserPassword(ctx context.Context, id uuid.UUID, password string) (bool, error) {
{{- else}}
func (uc *UserUsecase) VerifyUserPassword(ctx context.Context, id uint, password string) (bool, error) {
{{- end}}
	user, err := uc.userRepo.GetByID(ctx, id)
	if err != nil {
		return false, err
	}
	if user == nil {
		return false, errors.New("user not found")
	}

	return user.ValidatePassword(password), nil
}
