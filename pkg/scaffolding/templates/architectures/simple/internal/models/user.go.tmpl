package models

import (
	"time"

	{{- if eq .Database "postgresql" }}
	"github.com/google/uuid"
	{{- end}}

	{{- if eq .Tool "gorm" }}
	"gorm.io/gorm"
	{{- end}}
)

// User is the main data model.
// Struct tags are adjusted based on the chosen ORM/tool.
type User struct {
	{{- if eq .Database "postgresql" }}
	ID        uuid.UUID `json:"id" {{if eq .Tool "gorm"}}gorm:"type:uuid;primary_key;default:gen_random_uuid()"{{else}}db:"id"{{end}}`
	{{- else}}
	ID        uint      `json:"id" {{if eq .Tool "gorm"}}gorm:"primary_key"{{else}}db:"id"{{end}}`
	{{- end}}
	Name      string    `json:"name" {{if eq .Tool "gorm"}}gorm:"type:varchar(255);not null"{{else}}db:"name"{{end}}`
	Email     string    `json:"email" {{if eq .Tool "gorm"}}gorm:"type:varchar(255);unique;not null"{{else}}db:"email"{{end}}`
	Password  string    `json:"-" {{if eq .Tool "gorm"}}gorm:"type:varchar(255);not null"{{else}}db:"password"{{end}}`
	Active    bool      `json:"active" {{if eq .Tool "gorm"}}gorm:"default:true"{{else}}db:"active"{{end}}` // Column name 'active' in DB
	CreatedAt time.Time `json:"created_at" {{if eq .Tool "gorm"}}{{else}}db:"created_at"{{end}}`
	UpdatedAt time.Time `json:"updated_at" {{if eq .Tool "gorm"}}{{else}}db:"updated_at"{{end}}`
	{{- if eq .Tool "gorm" }}
	DeletedAt gorm.DeletedAt `json:"-" gorm:"index"`
	{{- end}}
}

// CreateUserRequest is a DTO (Data Transfer Object) for creating a user.
type CreateUserRequest struct {
	Name     string `json:"name" validate:"required,min=2,max=100"`
	Email    string `json:"email" validate:"required,email"`
	Password string `json:"password" validate:"required,min=6"`
}

// UpdateUserRequest is a DTO for updating a user.
type UpdateUserRequest struct {
	Name   *string `json:"name,omitempty" validate:"omitempty,min=2,max=100"`
	Active *bool   `json:"active,omitempty"`
}

// UserResponse is a DTO for displaying user data (without password).
type UserResponse struct {
	{{- if eq .Database "postgresql" }}
	ID        uuid.UUID `json:"id"`
	{{- else}}
	ID        uint      `json:"id"`
	{{- end}}
	Name      string    `json:"name"`
	Email     string    `json:"email"`
	Active    bool      `json:"active"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

// Pagination is a struct for pagination information.
type Pagination struct {
	Total      int64 `json:"total"`
	Page       int   `json:"page"`
	PerPage    int   `json:"per_page"`
	TotalPages int   `json:"total_pages"`
}

// UsersResponse is a DTO for a list of users with pagination.
type UsersResponse struct {
	Users      []UserResponse `json:"users"`
	Pagination Pagination     `json:"pagination"`
}