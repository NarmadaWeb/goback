package repositories

import (
	"context"
	"errors"

	{{- if eq .Database "postgresql" }}
	"github.com/google/uuid"
	{{- end}}

	{{- if eq .Tool "gorm" }}
	"gorm.io/gorm"
	{{- end}}

	{{- if eq .Tool "sqlx" }}
	"fmt"
	"time"
	"github.com/jmoiron/sqlx"
	{{- end}}

	{{- if eq .Tool "sqlc" }}
	db_sqlc "{{.ModulePath}}/db/sqlc"
		{{- if eq .Database "postgresql" }}
		"github.com/jackc/pgx/v5"
		"github.com/jackc/pgx/v5/pgtype"
		{{- else}}
		"database/sql"
		{{- end}}
	{{- end}}
	"{{.ModulePath}}/internal/models"
)

// Dynamic ID type based on database
{{- if eq .Database "postgresql" }}
type UserID = uuid.UUID
{{- else}}
type UserID = int32 // Use int32 for MySQL/SQLite
{{- end}}

// UserRepository is a consistent interface for User data operations.
type UserRepository interface {
	Create(ctx context.Context, user *models.User) (*models.User, error)
	FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error)
	FindByID(ctx context.Context, id UserID) (*models.User, error)
	FindByEmail(ctx context.Context, email string) (*models.User, error)
	Update(ctx context.Context, user *models.User) (*models.User, error)
	Delete(ctx context.Context, id UserID) error
}

{{/* ======================================================= */}}
{{/*                  GORM IMPLEMENTATION                    */}}
{{/* ======================================================= */}}

{{- if eq .Tool "gorm" }}
// GORM implementation of UserRepository
type userRepository struct {
	db *gorm.DB
}

func NewUserRepository(db *gorm.DB) UserRepository {
	return &userRepository{db: db}
}

func (r *userRepository) Create(ctx context.Context, user *models.User) (*models.User, error) {
	err := r.db.WithContext(ctx).Create(user).Error
	return user, err
}

func (r *userRepository) FindByID(ctx context.Context, id UserID) (*models.User, error) {
	var user models.User
	if err := r.db.WithContext(ctx).First(&user, "id = ?", id).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, errors.New("user not found")
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	var user models.User
	if err := r.db.WithContext(ctx).First(&user, "email = ?", email).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil // Return nil, nil if not found for service checks
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error) {
	var users []models.User
	var total int64

	db := r.db.WithContext(ctx).Model(&models.User{})

	if err := db.Count(&total).Error; err != nil {
		return nil, 0, err
	}

	offset := (page - 1) * perPage
	if err := db.Limit(perPage).Offset(offset).Find(&users).Error; err != nil {
		return nil, 0, err
	}
	return users, total, nil
}

func (r *userRepository) Update(ctx context.Context, user *models.User) (*models.User, error) {
	err := r.db.WithContext(ctx).Save(user).Error
	return user, err
}

func (r *userRepository) Delete(ctx context.Context, id UserID) error {
	result := r.db.WithContext(ctx).Delete(&models.User{}, "id = ?", id)
	if result.Error != nil {
		return result.Error
	}
	if result.RowsAffected == 0 {
		return errors.New("user not found")
	}
	return nil
}
{{- end }}

{{/* ======================================================= */}}
{{/*                  SQLC IMPLEMENTATION                    */}}
{{/* ======================================================= */}}

{{- if eq .Tool "sqlc" }}
// SQLC implementation of UserRepository
type userRepository struct {
	queries *db_sqlc.Queries
	db      db_sqlc.DBTX
}

func NewUserRepository(sqlDB db_sqlc.DBTX) UserRepository {
	return &userRepository{
		queries: db_sqlc.New(sqlDB),
		db:      sqlDB,
	}
}

// toModel maps from SQLC generated User to internal models.User
func (r *userRepository) toModel(u db_sqlc.User) *models.User {
	user := &models.User{
		Name:      u.Name,
		Email:     u.Email,
		Password:  u.Password,
		{{- if eq .Database "postgresql" }}
		ID:        u.ID,
		Active:    u.Active.Bool,
		CreatedAt: u.CreatedAt.Time,
		UpdatedAt: u.UpdatedAt.Time,
		{{- else}}
		ID:        int(u.ID),
		Active:    u.Active.Bool,
		CreatedAt: u.CreatedAt.Time,
		UpdatedAt: u.UpdatedAt.Time,
		{{- end}}
	}
	return user
}

func (r *userRepository) Create(ctx context.Context, user *models.User) (*models.User, error) {
	params := db_sqlc.CreateUserParams{
		Name:     user.Name,
		Email:    user.Email,
		Password: user.Password,
		{{- if eq .Database "postgresql" }}
		Active:   pgtype.Bool{Bool: user.Active, Valid: true},
		{{- else}}
		Active:   sql.NullBool{Bool: user.Active, Valid: true},
		{{- end}}
	}

	{{- if eq .Database "postgresql" }}
	createdUser, err := r.queries.CreateUser(ctx, params)
	if err != nil {
		return nil, err
	}
	return r.toModel(createdUser), nil
	{{- else}}
	// For MySQL/SQLite, use INSERT and then fetch the inserted record
	_, err := r.queries.CreateUser(ctx, params)
	if err != nil {
		return nil, err
	}
	// Retrieve the inserted record by email to get all fields (including timestamps)
	sqlcUser, err := r.queries.GetUserByEmail(ctx, user.Email)
	if err != nil {
		return nil, err
	}
	return r.toModel(sqlcUser), nil
	{{- end}}
}

func (r *userRepository) FindByID(ctx context.Context, id UserID) (*models.User, error) {
	{{- if eq .Database "postgresql" }}
	sqlcUser, err := r.queries.GetUserByID(ctx, id)
	errNoRows := pgx.ErrNoRows
	{{- else}}
	sqlcUser, err := r.queries.GetUserByID(ctx, int32(id))
	errNoRows := sql.ErrNoRows
	{{- end}}

	if err != nil {
		if errors.Is(err, errNoRows) {
			return nil, errors.New("user not found")
		}
		return nil, err
	}
	return r.toModel(sqlcUser), nil
}

func (r *userRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	sqlcUser, err := r.queries.GetUserByEmail(ctx, email)
	{{- if eq .Database "postgresql" }}
	errNoRows := pgx.ErrNoRows
	{{- else}}
	errNoRows := sql.ErrNoRows
	{{- end}}

	if err != nil {
		if errors.Is(err, errNoRows) {
			return nil, nil // Return nil, nil if not found for service checks
		}
		return nil, err
	}
	return r.toModel(sqlcUser), nil
}

func (r *userRepository) FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error) {
	offset := int32((page - 1) * perPage)
	limit := int32(perPage)

	total, err := r.queries.CountUsers(ctx)
	if err != nil {
		return nil, 0, err
	}

	listUsersParams := db_sqlc.ListUsersParams{
		Limit:  limit,
		Offset: offset,
	}
	sqlcUsers, err := r.queries.ListUsers(ctx, listUsersParams)
	if err != nil {
		return nil, 0, err
	}

	var userModels []models.User
	for _, u := range sqlcUsers {
		userModels = append(userModels, *r.toModel(u))
	}
	return userModels, total, nil
}

func (r *userRepository) Update(ctx context.Context, user *models.User) (*models.User, error) {
	params := db_sqlc.UpdateUserParams{
		{{- if eq .Database "postgresql" }}
		ID:     user.ID,
		Active: pgtype.Bool{Bool: user.Active, Valid: true},
		{{- else}}
		ID:     int32(user.ID),
		Active: sql.NullBool{Bool: user.Active, Valid: true},
		{{- end}}
		Name:   user.Name,
		Email:  user.Email,
	}

	{{- if eq .Database "postgresql" }}
	updatedUser, err := r.queries.UpdateUser(ctx, params)
	if err != nil {
		return nil, err
	}
	return r.toModel(updatedUser), nil
	{{- else}}
	err := r.queries.UpdateUser(ctx, params)
	if err != nil {
		return nil, err
	}
	// Retrieve updated record
	return r.FindByID(ctx, UserID(user.ID))
	{{- end}}
}

func (r *userRepository) Delete(ctx context.Context, id UserID) error {
	{{- if eq .Database "postgresql" }}
	err := r.queries.DeleteUser(ctx, id)
	errNoRows := pgx.ErrNoRows
	{{- else}}
	err := r.queries.DeleteUser(ctx, int32(id))
	errNoRows := sql.ErrNoRows
	{{- end}}

	if err != nil {
		if errors.Is(err, errNoRows) {
			return errors.New("user not found")
		}
		return err
	}
	return nil
}
{{- end }}

{{/* ======================================================= */}}
{{/*                  SQLX IMPLEMENTATION                    */}}
{{/* ======================================================= */}}

{{- if eq .Tool "sqlx" }}
// SQLX implementation of UserRepository
type userRepository struct {
	db *sqlx.DB
}

func NewUserRepository(db *sqlx.DB) UserRepository {
	return &userRepository{db: db}
}

// Helper function to handle placeholder syntax ($1 or ?)
func getPlaceholder(dbType string) string {
    if dbType == "postgres" || dbType == "postgresql" {
        return "$"
    }
    return "?"
}

func (r *userRepository) Create(ctx context.Context, user *models.User) (*models.User, error) {
	ph := getPlaceholder(r.db.DriverName())
	query := fmt.Sprintf(
		"INSERT INTO users (name, email, password, active, created_at, updated_at) VALUES (%s1, %s2, %s3, %s4, NOW(), NOW())",
		ph, ph, ph, ph,
	)

	if r.db.DriverName() == "postgres" {
		query += fmt.Sprintf(" RETURNING id, created_at, updated_at")
	}

	stmt, err := r.db.PrepareContext(ctx, query)
	if err != nil {
		return nil, err
	}
	defer stmt.Close()

	if r.db.DriverName() == "postgres" {
		var id UserID
		var createdAt, updatedAt time.Time
		err := stmt.QueryRowContext(ctx, user.Name, user.Email, user.Password, user.Active).Scan(&id, &createdAt, &updatedAt)
		if err != nil {
			return nil, err
		}
		user.ID = id
		user.CreatedAt = createdAt
		user.UpdatedAt = updatedAt
		return user, nil
	} else {
		// For MySQL/SQLite
		result, err := stmt.ExecContext(ctx, user.Name, user.Email, user.Password, user.Active)
		if err != nil {
			return nil, err
		}
		lastID, err := result.LastInsertId()
		if err != nil {
			return nil, err
		}
		user.ID = UserID(lastID)
		now := time.Now()
		user.CreatedAt = now
		user.UpdatedAt = now
		return user, nil
	}
}

func (r *userRepository) FindByID(ctx context.Context, id UserID) (*models.User, error) {
	var user models.User
	ph := getPlaceholder(r.db.DriverName())
	query := fmt.Sprintf("SELECT id, name, email, password, active, created_at, updated_at FROM users WHERE id = %s1", ph)
	err := r.db.GetContext(ctx, &user, query, id)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, errors.New("user not found")
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	var user models.User
	ph := getPlaceholder(r.db.DriverName())
	query := fmt.Sprintf("SELECT id, name, email, password, active, created_at, updated_at FROM users WHERE email = %s1", ph)
	err := r.db.GetContext(ctx, &user, query, email)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil // Return nil, nil if not found
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error) {
	var users []models.User
	var total int64
	ph := getPlaceholder(r.db.DriverName())

	// Count
	if err := r.db.GetContext(ctx, &total, "SELECT COUNT(*) FROM users"); err != nil {
		return nil, 0, err
	}

	offset := (page - 1) * perPage

	// Select
	query := fmt.Sprintf("SELECT id, name, email, password, active, created_at, updated_at FROM users ORDER BY created_at DESC LIMIT %s1 OFFSET %s2", ph, ph)
	err := r.db.SelectContext(ctx, &users, query, perPage, offset)

	if err != nil {
		return nil, 0, err
	}
	return users, total, nil
}

func (r *userRepository) Update(ctx context.Context, user *models.User) (*models.User, error) {
	ph := getPlaceholder(r.db.DriverName())
	query := fmt.Sprintf("UPDATE users SET name = %s1, email = %s2, active = %s3, updated_at = NOW() WHERE id = %s4", ph, ph, ph, ph)

	result, err := r.db.ExecContext(ctx, query, user.Name, user.Email, user.Active, user.ID)
	if err != nil {
		return nil, err
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil || rowsAffected == 0 {
		return nil, errors.New("user not found or no changes made")
	}

	// Update timestamps in memory
	now := time.Now()
	user.UpdatedAt = now

	return user, nil
}

func (r *userRepository) Delete(ctx context.Context, id UserID) error {
	ph := getPlaceholder(r.db.DriverName())
	query := fmt.Sprintf("DELETE FROM users WHERE id = %s1", ph)
	result, err := r.db.ExecContext(ctx, query, id)
	if err != nil {
		return err
	}
	rows, _ := result.RowsAffected()
	if rows == 0 {
		return errors.New("user not found")
	}
	return nil
}
{{- end }}