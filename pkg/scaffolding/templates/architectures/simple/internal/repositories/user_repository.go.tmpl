package repositories

import (
	"context"
	"errors"

	"{{.ModulePath}}/internal/models"

	{{- if eq .Database "postgresql" }}
	"github.com/google/uuid"
	{{- end}}

	{{- if eq .Tool "gorm" }}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx" }}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc" }}
	db_sqlc "{{.ModulePath}}/db/sqlc"
	{{- end }}
)

// Tipe ID dinamis berdasarkan database
{{- if eq .Database "postgresql" }}
type UserID = uuid.UUID
{{- else}}
type UserID = int64
{{- end}}

// UserRepository adalah interface konsisten untuk operasi data User.
type UserRepository interface {
	Create(ctx context.Context, user *models.User) (*models.User, error)
	FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error)
	FindByID(ctx context.Context, id UserID) (*models.User, error)
	FindByEmail(ctx context.Context, email string) (*models.User, error)
	Update(ctx context.Context, user *models.User) (*models.User, error)
	Delete(ctx context.Context, id UserID) error
}


{{/* --- IMPLEMENTASI UNTUK GORM --- */}}
{{ if eq .Tool "gorm" }}
type userRepository struct {
	db *gorm.DB
}

func NewUserRepository(db *gorm.DB) UserRepository {
	return &userRepository{db: db}
}

func (r *userRepository) Create(ctx context.Context, user *models.User) (*models.User, error) {
	err := r.db.WithContext(ctx).Create(user).Error
	return user, err
}

func (r *userRepository) FindByID(ctx context.Context, id UserID) (*models.User, error) {
	var user models.User
	if err := r.db.WithContext(ctx).First(&user, "id = ?", id).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, errors.New("user not found")
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	var user models.User
	if err := r.db.WithContext(ctx).First(&user, "email = ?", email).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil // Return nil, nil jika tidak ditemukan untuk pengecekan service
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error) {
	var users []models.User
	var total int64

	db := r.db.WithContext(ctx).Model(&models.User{})

	if err := db.Count(&total).Error; err != nil {
		return nil, 0, err
	}

	offset := (page - 1) * perPage
	if err := db.Limit(perPage).Offset(offset).Find(&users).Error; err != nil {
		return nil, 0, err
	}
	return users, total, nil
}

func (r *userRepository) Update(ctx context.Context, user *models.User) (*models.User, error) {
	// GORM's Save akan melakukan update jika primary key ada
	err := r.db.WithContext(ctx).Save(user).Error
	return user, err
}

func (r *userRepository) Delete(ctx context.Context, id UserID) error {
	result := r.db.WithContext(ctx).Delete(&models.User{}, "id = ?", id)
	if result.Error != nil {
		return result.Error
	}
	if result.RowsAffected == 0 {
		return errors.New("user not found")
	}
	return nil
}
{{ end }}


{{/* --- IMPLEMENTASI UNTUK SQLC --- */}}
{{ if eq .Tool "sqlc" }}
type userRepository struct {
	db *sql.DB
	*db_sqlc.Queries
}

func NewUserRepository(db *sql.DB) UserRepository {
	return &userRepository{
		db:      db,
		Queries: db_sqlc.New(db),
	}
}

func (r *userRepository) toModel(u db_sqlc.User) *models.User {
	return &models.User{
		ID:        u.ID,
		Name:      u.Name,
		Email:     u.Email,
		Password:  u.Password,
		Active:    u.Active,
		CreatedAt: u.CreatedAt,
		UpdatedAt: u.UpdatedAt,
	}
}

func (r *userRepository) Create(ctx context.Context, user *models.User) (*models.User, error) {
	createdUser, err := r.Queries.CreateUser(ctx, db_sqlc.CreateUserParams{
		Name:     user.Name,
		Email:    user.Email,
		Password: user.Password,
	})
	if err != nil {
		return nil, err
	}
	return r.toModel(createdUser), nil
}

func (r *userRepository) FindByID(ctx context.Context, id UserID) (*models.User, error) {
	user, err := r.Queries.GetUser(ctx, id)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, errors.New("user not found")
		}
		return nil, err
	}
	return r.toModel(user), nil
}

func (r *userRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	user, err := r.Queries.GetUserByEmail(ctx, email)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil // Tidak ditemukan
		}
		return nil, err
	}
	return r.toModel(user), nil
}

func (r *userRepository) FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error) {
	// Note: sqlc doesn't directly support pagination.
	// This implementation fetches all users and mimics pagination in-memory.
	// For production, consider using cursor-based pagination with limit and offset in your query.
	users, err := r.Queries.ListUsers(ctx)
	if err != nil {
		return nil, 0, err
	}

	var userModels []models.User
	for _, u := range users {
		userModels = append(userModels, *r.toModel(u))
	}

	total := int64(len(userModels))
	start := (page - 1) * perPage
	if start > len(userModels) {
		return []models.User{}, total, nil
	}
	end := start + perPage
	if end > len(userModels) {
		end = len(userModels)
	}

	return userModels[start:end], total, nil
}

func (r *userRepository) Update(ctx context.Context, user *models.User) (*models.User, error) {
	updatedUser, err := r.Queries.UpdateUser(ctx, db_sqlc.UpdateUserParams{
		ID:    user.ID,
		Name:  user.Name,
		Email: user.Email,
	})
	if err != nil {
		return nil, err
	}
	return r.toModel(updatedUser), nil
}

func (r *userRepository) Delete(ctx context.Context, id UserID) error {
	return r.Queries.DeleteUser(ctx, id)
}
{{ end }}


{{/* --- IMPLEMENTASI UNTUK SQLX --- */}}
{{ if eq .Tool "sqlx" }}
type userRepository struct {
	db *sqlx.DB
}

func NewUserRepository(db *sqlx.DB) UserRepository {
	return &userRepository{db: db}
}

func (r *userRepository) Create(ctx context.Context, user *models.User) (*models.User, error) {
	query := `INSERT INTO users (name, email, password) VALUES (:name, :email, :password) RETURNING id`

	stmt, err := r.db.PrepareNamedContext(ctx, query)
	if err != nil {
		return nil, err
	}

	var id UserID
	if err := stmt.GetContext(ctx, &id, user); err != nil {
		return nil, err
	}
	user.ID = id
	return user, nil
}

func (r *userRepository) FindByID(ctx context.Context, id UserID) (*models.User, error) {
	var user models.User
	query := "SELECT * FROM users WHERE id = $1"
	err := r.db.GetContext(ctx, &user, query, id)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, errors.New("user not found")
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	var user models.User
	query := "SELECT * FROM users WHERE email = $1"
	err := r.db.GetContext(ctx, &user, query, email)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil // Tidak ditemukan
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error) {
	var users []models.User
	var total int64

	if err := r.db.GetContext(ctx, &total, "SELECT COUNT(*) FROM users"); err != nil {
		return nil, 0, err
	}

	offset := (page - 1) * perPage
	query := "SELECT * FROM users ORDER BY created_at DESC LIMIT $1 OFFSET $2"
	err := r.db.SelectContext(ctx, &users, query, perPage, offset)
	return users, total, err
}

func (r *userRepository) Update(ctx context.Context, user *models.User) (*models.User, error) {
	query := `UPDATE users SET name = :name, email = :email, active = :active, updated_at = NOW() WHERE id = :id`
	result, err := r.db.NamedExecContext(ctx, query, user)
	if err != nil {
		return nil, err
	}
	rows, _ := result.RowsAffected()
	if rows == 0 {
		return nil, errors.New("user not found or no changes made")
	}
	return user, nil
}

func (r *userRepository) Delete(ctx context.Context, id UserID) error {
	result, err := r.db.ExecContext(ctx, "DELETE FROM users WHERE id = $1", id)
	if err != nil {
		return err
	}
	rows, _ := result.RowsAffected()
	if rows == 0 {
		return errors.New("user not found")
	}
	return nil
}
{{ end }}
