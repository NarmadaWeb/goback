package repositories

import (
	"context"
	"errors"
	
	{{- if eq .Database "postgresql" }}
	"github.com/google/uuid"
	{{- else}}
	"database/sql"
	{{- end}}
	
	{{- if eq .Tool "gorm" }}
	"gorm.io/gorm"
	{{- end}}

	{{- if eq .Tool "sqlx" }}
	"github.com/jmoiron/sqlx"
	{{- end }}

	{{- if eq .Tool "sqlc" }}
	db_sqlc "{{.ModulePath}}/db/sqlc" // Import generated SQLC code
		{{- if eq .Database "postgresql" }}
		"github.com/jackc/pgx/v5"
		"github.com/jackc/pgx/v5/pgtype"
		{{- end }}
	{{- end }}

	"{{.ModulePath}}/internal/models"
)

// Dynamic ID type based on database
{{- if eq .Database "postgresql" }}
type UserID = uuid.UUID
{{- else}}
type UserID = int64 // Use int64 for generic non-UUID primary keys
{{- end}}

// UserRepository is a consistent interface for User data operations.
type UserRepository interface {
	Create(ctx context.Context, user *models.User) (*models.User, error)
	FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error)
	FindByID(ctx context.Context, id UserID) (*models.User, error)
	FindByEmail(ctx context.Context, email string) (*models.User, error)
	Update(ctx context.Context, user *models.User) (*models.User, error)
	Delete(ctx context.Context, id UserID) error
}

{{/* ======================================================= */}}
{{/*                  GORM IMPLEMENTATION                    */}}
{{/* ======================================================= */}}

{{- if eq .Tool "gorm" }}
// GORM implementation of UserRepository
type userRepository struct {
	db *gorm.DB
}

func NewUserRepository(db *gorm.DB) UserRepository {
	return &userRepository{db: db}
}

func (r *userRepository) Create(ctx context.Context, user *models.User) (*models.User, error) {
	err := r.db.WithContext(ctx).Create(user).Error
	return user, err
}

func (r *userRepository) FindByID(ctx context.Context, id UserID) (*models.User, error) {
	var user models.User
	if err := r.db.WithContext(ctx).First(&user, "id = ?", id).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, errors.New("user not found")
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	var user models.User
	if err := r.db.WithContext(ctx).First(&user, "email = ?", email).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return nil, nil // Return nil, nil if not found for service checks
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error) {
	var users []models.User
	var total int64

	db := r.db.WithContext(ctx).Model(&models.User{})

	if err := db.Count(&total).Error; err != nil {
		return nil, 0, err
	}

	offset := (page - 1) * perPage
	if err := db.Limit(perPage).Offset(offset).Find(&users).Error; err != nil {
		return nil, 0, err
	}
	return users, total, nil
}

func (r *userRepository) Update(ctx context.Context, user *models.User) (*models.User, error) {
	err := r.db.WithContext(ctx).Save(user).Error
	return user, err
}

func (r *userRepository) Delete(ctx context.Context, id UserID) error {
	result := r.db.WithContext(ctx).Delete(&models.User{}, "id = ?", id)
	if result.Error != nil {
		return result.Error
	}
	if result.RowsAffected == 0 {
		return errors.New("user not found")
	}
	return nil
}
{{- end }}

{{/* ======================================================= */}}
{{/*                  SQLC IMPLEMENTATION                    */}}
{{/* ======================================================= */}}

{{- if eq .Tool "sqlc" }}
// SQLC implementation of UserRepository
type userRepository struct {
	queries *db_sqlc.Queries
	db      db_sqlc.DBTX
}

func NewUserRepository(sqlDB db_sqlc.DBTX) UserRepository {
	return &userRepository{
		queries: db_sqlc.New(sqlDB),
		db:      sqlDB,
	}
}

// toModel maps from SQLC generated User to internal models.User
func (r *userRepository) toModel(u db_sqlc.User) *models.User {
	user := &models.User{
		Name:      u.Name,
		Email:     u.Email,
		Password:  u.Password,
		
		{{- if eq .Database "postgresql" }}
		ID:        u.ID,
		Active:    u.Active.Bool,
		CreatedAt: u.CreatedAt.Time,
		UpdatedAt: u.UpdatedAt.Time,
		{{- else}}
		ID:        UserID(u.ID),
		Active:    u.Active,
		CreatedAt: u.CreatedAt,
		UpdatedAt: u.UpdatedAt,
		{{- end}}
	}
	return user
}

func (r *userRepository) Create(ctx context.Context, user *models.User) (*models.User, error) {
	params := db_sqlc.CreateUserParams{
		Name:     user.Name,
		Email:    user.Email,
		Password: user.Password,
		{{- if eq .Database "postgresql" }}
		Active:   pgtype.Bool{Bool: user.Active, Valid: true},
		{{- else}}
		Active:   user.Active,
		{{- end}}
	}
	createdUser, err := r.queries.CreateUser(ctx, params)
	if err != nil {
		return nil, err
	}
	return r.toModel(createdUser), nil
}

func (r *userRepository) FindByID(ctx context.Context, id UserID) (*models.User, error) {
	{{- if eq .Database "postgresql" }}
	user, err := r.queries.GetUserByID(ctx, id)
	errNoRows := pgx.ErrNoRows
	{{- else}}
	user, err := r.queries.GetUserByID(ctx, int64(id))
	errNoRows := sql.ErrNoRows
	{{- end}}

	if err != nil {
		if errors.Is(err, errNoRows) {
			return nil, errors.New("user not found")
		}
		return nil, err
	}
	return r.toModel(user), nil
}

func (r *userRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	{{- if eq .Database "postgresql" }}
	user, err := r.queries.GetUserByEmail(ctx, email)
	errNoRows := pgx.ErrNoRows
	{{- else}}
	user, err := r.queries.GetUserByEmail(ctx, email)
	errNoRows := sql.ErrNoRows
	{{- end}}

	if err != nil {
		if errors.Is(err, errNoRows) {
			return nil, nil // Return nil, nil if not found for service checks
		}
		return nil, err
	}
	return r.toModel(user), nil
}

func (r *userRepository) FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error) {
	offset := int32((page - 1) * perPage)
	limit := int32(perPage)

	total, err := r.queries.CountUsers(ctx)
	if err != nil {
		return nil, 0, err
	}

	listUsersParams := db_sqlc.ListUsersParams{
		Limit:  limit,
		Offset: offset,
	}
	sqlcUsers, err := r.queries.ListUsers(ctx, listUsersParams)
	if err != nil {
		return nil, 0, err
	}

	var userModels []models.User
	for _, u := range sqlcUsers {
		userModels = append(userModels, *r.toModel(u))
	}
	return userModels, total, nil
}

func (r *userRepository) Update(ctx context.Context, user *models.User) (*models.User, error) {
	params := db_sqlc.UpdateUserParams{
		{{- if eq .Database "postgresql" }}
		ID: user.ID,
		Active: pgtype.Bool{Bool: user.Active, Valid: true},
		{{- else}}
		ID: int64(user.ID),
		Active: user.Active,
		{{- end}}
		Name:     user.Name,
		Email:    user.Email,
	}
	updatedUser, err := r.queries.UpdateUser(ctx, params)
	if err != nil {
		return nil, err
	}
	return r.toModel(updatedUser), nil
}

func (r *userRepository) Delete(ctx context.Context, id UserID) error {
	{{- if eq .Database "postgresql" }}
	err := r.queries.DeleteUser(ctx, id)
	errNoRows := pgx.ErrNoRows
	{{- else}}
	err := r.queries.DeleteUser(ctx, int64(id))
	errNoRows := sql.ErrNoRows
	{{- end}}

	if err != nil {
		if errors.Is(err, errNoRows) {
			return errors.New("user not found")
		}
		return err
	}
	return nil
}
{{- end }}

{{/* ======================================================= */}}
{{/*                  SQLX IMPLEMENTATION                    */}}
{{/* ======================================================= */}}

{{- if eq .Tool "sqlx" }}
// SQLX implementation of UserRepository
type userRepository struct {
	db *sqlx.DB
}

func NewUserRepository(db *sqlx.DB) UserRepository {
	return &userRepository{db: db}
}

// Helper function to handle placeholder syntax ($1 or ?)
func getPlaceholder(dbType string) string {
    if dbType == "postgres" || dbType == "postgresql" {
        return "$"
    }
    return "?"
}

func (r *userRepository) Create(ctx context.Context, user *models.User) (*models.User, error) {
	// Note: RETURNING is primarily for Postgres. For MySQL/SQLite, rely on lastInsertId.
	query := `INSERT INTO users (name, email, password, active, created_at, updated_at) VALUES (:name, :email, :password, :active, NOW(), NOW())`
	
	if r.db.DriverName() == "postgres" {
		query += ` RETURNING id, created_at, updated_at`
	}
	
	res, err := r.db.NamedExecContext(ctx, query, user)
	if err != nil {
		return nil, err
	}
	
	if r.db.DriverName() != "postgres" {
		// Handle MySQL/SQLite where RETURNING ID is not standard
		lastID, err := res.LastInsertId()
		if err == nil {
			// Convert lastID (int64) to the correct UserID type
			{{- if eq .Database "postgresql" }}
			// This path should ideally not be hit if postgres is correctly configured
			return nil, errors.New("SQLX Postgres requires RETURNING clause or proper uuid handling")
			{{- else}}
			user.ID = UserID(lastID)
			// For non-Postgres, we manually fetch current timestamps since we can't use RETURNING
			now := time.Now()
			user.CreatedAt = now
			user.UpdatedAt = now
			{{- end}}
		}
	} else {
		// Re-fetch the created user to get the auto-generated ID/timestamps (Postgres specific method)
		// Since NamedExec doesn't return rows, if we need fields, we should use NamedQueryContext
		if r.db.DriverName() == "postgres" {
			query = `INSERT INTO users (name, email, password, active) VALUES (:name, :email, :password, :active) RETURNING id, created_at, updated_at`
			rows, err := r.db.NamedQueryContext(ctx, query, user)
			if err != nil {
				return nil, err
			}
			defer rows.Close()
			if rows.Next() {
				if err := rows.Scan(&user.ID, &user.CreatedAt, &user.UpdatedAt); err != nil {
					return nil, err
				}
			} else {
				return nil, errors.New("failed to retrieve ID after user creation (Postgres)")
			}
		}
	}

	return user, nil
}

func (r *userRepository) FindByID(ctx context.Context, id UserID) (*models.User, error) {
	var user models.User
	ph := getPlaceholder(r.db.DriverName())
	query := fmt.Sprintf("SELECT id, name, email, password, active, created_at, updated_at FROM users WHERE id = %s1", ph)
	err := r.db.GetContext(ctx, &user, query, id)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, errors.New("user not found")
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindByEmail(ctx context.Context, email string) (*models.User, error) {
	var user models.User
	ph := getPlaceholder(r.db.DriverName())
	query := fmt.Sprintf("SELECT id, name, email, password, active, created_at, updated_at FROM users WHERE email = %s1", ph)
	err := r.db.GetContext(ctx, &user, query, email)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, nil // Return nil, nil if not found
		}
		return nil, err
	}
	return &user, nil
}

func (r *userRepository) FindAll(ctx context.Context, page, perPage int) ([]models.User, int64, error) {
	var users []models.User
	var total int64
	ph := getPlaceholder(r.db.DriverName())
	
	// Count
	if err := r.db.GetContext(ctx, &total, "SELECT COUNT(*) FROM users"); err != nil {
		return nil, 0, err
	}

	offset := (page - 1) * perPage
	
	// Select
	// Note: LIMIT/OFFSET syntax is standard across Postgres/MySQL/SQLite
	query := fmt.Sprintf("SELECT id, name, email, password, active, created_at, updated_at FROM users ORDER BY created_at DESC LIMIT %s1 OFFSET %s2", ph, ph)
	err := r.db.SelectContext(ctx, &users, query, perPage, offset)
	
	if err != nil {
		return nil, 0, err
	}
	return users, total, nil
}

func (r *userRepository) Update(ctx context.Context, user *models.User) (*models.User, error) {
	query := `UPDATE users SET name = :name, email = :email, active = :active, updated_at = NOW()`
	
	// Add RETURNING clause if PostgreSQL is used, otherwise rely on rows affected check
	if r.db.DriverName() == "postgres" {
		query += ` WHERE id = :id RETURNING created_at, updated_at`
	} else {
		query += ` WHERE id = :id`
	}

	if r.db.DriverName() == "postgres" {
		// Use NamedQuery for PostgreSQL to retrieve returned values (timestamps)
		rows, err := r.db.NamedQueryContext(ctx, query, user)
		if err != nil {
			return nil, err
		}
		defer rows.Close()

		if rows.Next() {
			if err := rows.Scan(&user.CreatedAt, &user.UpdatedAt); err != nil {
				return nil, err
			}
		} else {
			return nil, errors.New("user not found or update failed (Postgres)")
		}
	} else {
		// Use NamedExec for MySQL/SQLite
		res, err := r.db.NamedExecContext(ctx, query, user)
		if err != nil {
			return nil, err
		}
		rowsAffected, err := res.RowsAffected()
		if err != nil || rowsAffected == 0 {
			return nil, errors.New("user not found or no changes made")
		}
		// Manually update timestamps for non-Postgres databases
		now := time.Now()
		user.UpdatedAt = now
	}
	
	return user, nil
}

func (r *userRepository) Delete(ctx context.Context, id UserID) error {
	ph := getPlaceholder(r.db.DriverName())
	query := fmt.Sprintf("DELETE FROM users WHERE id = %s1", ph)
	result, err := r.db.ExecContext(ctx, query, id)
	if err != nil {
		return err
	}
	rows, _ := result.RowsAffected()
	if rows == 0 {
		return errors.New("user not found")
	}
	return nil
}

{{- end }}