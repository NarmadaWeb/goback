package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	
	{{/* Imports needed for database cleanup and type assertions */}}
	{{if or (eq .Tool "gorm") (eq .Tool "sqlc") (eq .Tool "sqlx")}}
	"database/sql"
	"github.com/jackc/pgx/v5/pgxpool"
	{{end}}

	"{{.ModulePath}}/internal/utils"
	{{if eq .Architecture "simple" -}}
	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/database"
	"{{.ModulePath}}/internal/routes"
	{{if eq .Tool "gorm"}}"{{.ModulePath}}/internal/migrate" {{end}}
	{{else if eq .Architecture "ddd" -}}
	"{{.ModulePath}}/application"
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/infrastructure/persistence"
	"{{.ModulePath}}/interfaces/handlers"
	"{{.ModulePath}}/interfaces/routes"
	{{else if eq .Architecture "clean" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/infrastructure/database"
	{{if eq .Tool "gorm"}}"{{.ModulePath}}/infrastructure/repositories"{{end}}
	"{{.ModulePath}}/interfaces/routes"
	{{else if eq .Architecture "hexagonal" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/adapters/primary/http/routes"
	"{{.ModulePath}}/adapters/secondary/database"
	{{end -}}
)

var (
	version   = "dev"
	commit    = "unknown"
	buildTime = "unknown"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	// Initialize database
	cfg.Database.Type = strings.ToLower(cfg.Database.Type)
	db, err := database.Connect(cfg.Database)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	
	// Handle database cleanup and migrations based on the tool
	{{- if or (eq .Tool "sqlx") (eq .Tool "sqlc")}}
	// db is db.DBTX (which can be *pgxpool.Pool for Postgres or *sql.DB for others)
	defer func() {
		if pool, ok := db.(*pgxpool.Pool); ok && pool != nil {
			pool.Close()
			log.Println("PostgreSQL connection pool closed.")
		} else if sqlDB, ok := db.(*sql.DB); ok && sqlDB != nil {
			sqlDB.Close()
			log.Println("Standard SQL database connection closed.")
		}
	}()

	// Run standard SQL migrations
	if err := utils.RunMigrations(db, cfg.Database.Type, "./migrations"); err != nil {
		log.Fatalf("could not run migrations: %v", err)
	}
	{{- end}}

	{{if eq .Tool "gorm"}}
	// Run Gorm migrations
	
	{{if eq .Architecture "simple"}}
	// Gorm needs to be closed later using db.DB()
	migrate.RunGormAutoMigration(db)
	{{end}}
	{{if or (eq .Architecture "ddd") (eq .Architecture "clean")}}
	if err := db.AutoMigrate(&repositories.UserPersistenceModel{}); err != nil {
		log.Fatalf("Failed to migrate database: %v", err)
	}
	{{else if eq .Architecture "hexagonal"}}
	if err := db.AutoMigrate(&database.UserPersistenceModel{}); err != nil {
		log.Fatalf("Failed to migrate database: %v", err)
	}
	{{end}}
	{{end}}

	// Initialize validator
	validator := utils.NewValidator()

	// Create Echo instance
	e := echo.New()

	// Add middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.CORS())
	// Note: Echo does not have a native RequestID middleware, often handled via custom middleware or a third-party package.

	// Setup routes
	{{if eq .Architecture "ddd"}}
	userRepo := persistence.NewSQLUserRepository(db)
	userService := application.NewUserApplicationService(userRepo)
	userHandler := handlers.NewUserHandler(userService, validator)
	routes.Setup(e, userHandler)
	{{else}}
	routes.Setup(e, db, validator)
	{{end}}

	// Start server in goroutine
	go func() {
		log.Printf("Starting server on port %s", cfg.Server.Port)
		log.Printf("Version: %s, Commit: %s, Build Time: %s", version, commit, buildTime)

		if err := e.Start(fmt.Sprintf(":%s", cfg.Server.Port)); err != nil && err != http.ErrServerClosed {
			e.Logger.Fatal("shutting down the server")
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("Shutting down server...")

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	
	// Shutdown Echo server
	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}

	{{- if eq .Tool "gorm"}}
	// Gorm wraps the standard sql.DB, which must be closed manually during graceful shutdown.
	if sqlDB, err := db.DB(); err == nil && sqlDB != nil {
		sqlDB.Close()
		log.Println("Gorm underlying SQL database connection closed.")
	}
	{{- end}}

	log.Println("Server exited")
}