package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	{{if eq .Architecture "simple" -}}
	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/database"
	"{{.ModulePath}}/internal/routes"
	"{{.ModulePath}}/internal/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/internal/migrate"
	{{end -}}
	{{else if eq .Architecture "ddd" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/interfaces/routes"
	"{{.ModulePath}}/domain/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/pkg/migrate"
	{{end -}}
	{{else if eq .Architecture "clean" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/interfaces/routes"
	"{{.ModulePath}}/domain/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/pkg/migrate"
	{{end -}}
	{{else if eq .Architecture "hexagonal" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/adapters/secondary/database"
	"{{.ModulePath}}/adapters/primary/http/routes"
	"{{.ModulePath}}/domain/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/pkg/migrate"
	{{end -}}
	{{end -}}
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

var (
	version   = "dev"
	commit    = "unknown"
	buildTime = "unknown"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	{{if eq .Tool "gorm"}}
	// Handle migrations
	if len(os.Args) > 1 && os.Args[1] == "migrate" {
		command := "up"
		if len(os.Args) > 2 {
			command = os.Args[2]
		}
		migrate.RunMigrations(&cfg.Database, command)
		return
	}
	{{end}}

	// Initialize database
	cfg.Database.Type = strings.ToLower(cfg.Database.Type)
	db, err := database.Connect(cfg.Database)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	{{- if or (eq .Tool "sqlx") (eq .Tool "sqlc")}}
	defer db.Close()
	{{- end}}

	// Initialize validator
	validator := utils.NewValidator()

	// Create Echo instance
	e := echo.New()

	// Add middleware
	e.Use(middleware.Logger())
	e.Use(middleware.Recover())
	e.Use(middleware.CORS())

	// Setup routes
	routes.Setup(e, db, validator)

	// Start server in goroutine
	go func() {
		log.Printf("Starting server on port %s", cfg.Server.Port)
		if err := e.Start(fmt.Sprintf(":%s", cfg.Server.Port)); err != nil && err != http.ErrServerClosed {
			e.Logger.Fatal("shutting down the server")
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	if err := e.Shutdown(ctx); err != nil {
		e.Logger.Fatal(err)
	}

	log.Println("Server exited")
}
