{{/* File: internal/routes/routes.go.tmpl (for Echo) */}}
package routes

import (
	"github.com/labstack/echo/v4"
	{{- if eq .Tool "gorm" }}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx" }}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc" }}
	db_sqlc "{{.ModulePath}}/db/sqlc"
	{{- end }}

	{{if eq .Architecture "simple" -}}
	"{{.ModulePath}}/internal/handlers"
	"{{.ModulePath}}/internal/repositories"
	"{{.ModulePath}}/internal/services"
	"{{.ModulePath}}/internal/utils"
	{{else if eq .Architecture "clean" -}}
	"{{.ModulePath}}/domain/usecases"
	"{{.ModulePath}}/infrastructure/repositories"
	"{{.ModulePath}}/interfaces/handlers"
	"{{.ModulePath}}/internal/utils"
	{{else if eq .Architecture "ddd" -}}
	"{{.ModulePath}}/application"
	"{{.ModulePath}}/infrastructure/persistence"
	"{{.ModulePath}}/interfaces/handlers"
	"{{.ModulePath}}/internal/utils"
	{{else if eq .Architecture "hexagonal" -}}
	"{{.ModulePath}}/adapters/primary/http/handlers"
	"{{.ModulePath}}/adapters/secondary/database"
	"{{.ModulePath}}/application/services"
	"{{.ModulePath}}/application/ports"
	"{{.ModulePath}}/internal/utils"
	{{end}}
)

// DBType is a generic alias for the database connection type.
type DBType {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}db_sqlc.DBTX{{end}}

// Setup configures all the application routes on the Echo instance.
func Setup(e *echo.Echo, db DBType, validator *utils.Validator) {
	{{if eq .Architecture "simple" -}}
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(userService, validator)
	{{else if eq .Architecture "clean" -}}
	userRepository := repositories.NewUserRepository(db)
	userUsecase := usecases.NewUserUsecase(userRepository)
	userHandler := handlers.NewUserHandler(userUsecase, validator)
	{{else if eq .Architecture "ddd" -}}
	userRepository := persistence.NewSQLUserRepository(db)
	userAppService := application.NewUserApplicationService(userRepository)
	userHandler := handlers.NewUserHandler(userAppService, validator)
	{{else if eq .Architecture "hexagonal" -}}
	userRepository := database.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(userService, validator)
	{{end}}

	// Health check endpoint
	e.GET("/health", handlers.HealthCheck)

	// API version 1 routes
	v1 := e.Group("/api/v1")
	{
		users := v1.Group("/users")
		{
			users.GET("", userHandler.GetAll)
			users.POST("", userHandler.Create)
			users.GET("/:id", userHandler.GetByID)
			users.PUT("/:id", userHandler.Update)
			users.DELETE("/:id", userHandler.Delete)
		}
	}
}