{{if eq .Architecture "simple"}}package routes

import (
	"net/http"

	"github.com/labstack/echo/v4"
	"{{.ModulePath}}/internal/handlers"
	"{{.ModulePath}}/internal/repositories"
	"{{.ModulePath}}/internal/services"
	"{{.ModulePath}}/internal/utils"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

func Setup(e *echo.Echo, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}, validator *utils.Validator) {
	// Initialize dependencies
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(*userService, validator)

	// API routes
	api := e.Group("/api/v1")
	{
		// User routes
		users := api.Group("/users")
		{
			users.GET("", userHandler.GetUsers)
			users.POST("", userHandler.CreateUser)
			users.GET("/:id", userHandler.GetUser)
			users.PUT("/:id", userHandler.UpdateUser)
			users.DELETE("/:id", userHandler.DeleteUser)
		}
	}

	// Health check
	e.GET("/health", healthCheckHandler)
}

func healthCheckHandler(c echo.Context) error {
	return c.JSON(http.StatusOK, map[string]interface{}{
		"status":  "healthy",
		"service": "{{.ProjectName}}",
		"version": "1.0.0",
	})
}
{{else if eq .Architecture "clean"}}package http

import (
	"{{.ModulePath}}/domain/usecases"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/interfaces/handlers"

	"github.com/labstack/echo/v4"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

func SetupRoutes(e *echo.Echo, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}) {
	// Setup repositories
	var userRepository usecases.UserRepository
	{{if eq .Tool "gorm"}}
	userRepository = database.NewGormUserRepository(db)
	{{else if eq .Tool "sqlx"}}
	userRepository = database.NewSqlxUserRepository(db)
	{{else if eq .Tool "sqlc"}}
	userRepository = database.NewSqlcUserRepository(db)
	{{end}}

	// Setup services
	userService := usecases.NewUserUsecase(userRepository)

	// Setup handlers
	userHandler := handlers.NewUserHandler(userService)

	// API version 1 routes
	v1 := e.Group("/api/v1")
	{
		users := v1.Group("/users")
		{
			users.POST("", userHandler.CreateUser)
			users.GET("/:id", userHandler.GetUser)
			users.GET("", userHandler.GetAllUsers)
			users.PUT("/:id", userHandler.UpdateUser)
			users.DELETE("/:id", userHandler.DeleteUser)
		}
	}
}
{{else if eq .Architecture "ddd"}}package routes

import (
	"{{.ModulePath}}/domain/repositories"
	"{{.ModulePath}}/domain/services"
	infra_repo "{{.ModulePath}}/infrastructure/repositories"
	"{{.ModulePath}}/interfaces/handlers"
	"{{.ModulePath}}/domain/utils"

	"github.com/labstack/echo/v4"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

func Setup(e *echo.Echo, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}, validator *utils.Validator) {
	// Initialize dependencies
	var userRepository repositories.UserRepository
	{{if eq .Tool "gorm"}}
	userRepository = infra_repo.NewGormUserRepository(db)
	{{else if eq .Tool "sqlx"}}
	userRepository = infra_repo.NewSqlxUserRepository(db)
	{{else if eq .Tool "sqlc"}}
	userRepository = infra_repo.NewSqlcUserRepository(db)
	{{end}}

	userService := services.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(*userService, validator)

	// API routes
	api := e.Group("/api/v1")
	{
		// User routes
		users := api.Group("/users")
		{
			users.GET("", userHandler.GetAll)
			users.POST("", userHandler.Create)
			users.GET("/:id", userHandler.GetByID)
			users.PUT("/:id", userHandler.Update)
			users.DELETE("/:id", userHandler.Delete)
		}
	}

	// Health check
	e.GET("/health", handlers.HealthCheck)
}
{{else if eq .Architecture "hexagonal"}}package routes

import (
	"{{.ModulePath}}/adapters/secondary/database"
	"{{.ModulePath}}/applications/services"
	"{{.ModulePath}}/ports"

	"github.com/labstack/echo/v4"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

func SetupRoutes(e *echo.Echo, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}) {
	// Setup repositories
	var userRepository ports.UserRepository
	{{if eq .Tool "gorm"}}
	userRepository = database.NewGormUserRepository(db)
	{{else if eq .Tool "sqlx"}}
	userRepository = database.NewSqlxUserRepository(db)
	{{else if eq .Tool "sqlc"}}
	userRepository = database.NewSqlcUserRepository(db)
	{{end}}

	// Setup services
	userService := services.NewUserService(userRepository)

	// Setup handlers
	userHandler := NewUserHandler(userService)

	// API version 1 routes
	v1 := e.Group("/api/v1")
	{
		users := v1.Group("/users")
		{
			users.POST("", userHandler.Create)
			users.GET("/:id", userHandler.GetByID)
			users.GET("", userHandler.GetAll)
			users.PUT("/:id", userHandler.Update)
			users.DELETE("/:id", userHandler.Delete)
		}
	}
}
{{end}}
