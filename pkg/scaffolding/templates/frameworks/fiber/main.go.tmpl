package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	{{if eq .Architecture "simple" -}}
	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/database"
	"{{.ModulePath}}/internal/middleware"
	"{{.ModulePath}}/internal/routes"
	"{{.ModulePath}}/internal/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/internal/migrate"
	{{end -}}
	{{else if eq .Architecture "ddd" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/interfaces/middleware"
	"{{.ModulePath}}/interfaces/routes"
	"{{.ModulePath}}/domain/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/pkg/migrate"
	{{end -}}
	{{else if eq .Architecture "clean" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/interfaces/middleware"
	"{{.ModulePath}}/interfaces/routes"
	"{{.ModulePath}}/domain/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/pkg/migrate"
	{{end -}}
	{{else if eq .Architecture "hexagonal" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/adapters/secondary/database"
	"{{.ModulePath}}/adapters/primary/http/middleware"
	"{{.ModulePath}}/adapters/primary/http/routes"
	"{{.ModulePath}}/domain/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/pkg/migrate"
	{{end -}}
	{{end -}}
	"github.com/gofiber/fiber/v2"
	"github.com/gofiber/fiber/v2/middleware/cors"
	"github.com/gofiber/fiber/v2/middleware/logger"
	"github.com/gofiber/fiber/v2/middleware/recover"
	"github.com/gofiber/fiber/v2/middleware/requestid"
)

var (
	version   = "dev"
	commit    = "unknown"
	buildTime = "unknown"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	{{if eq .Tool "gorm"}}
	// Handle migrations
	if len(os.Args) > 1 && os.Args[1] == "migrate" {
		command := "up"
		if len(os.Args) > 2 {
			command = os.Args[2]
		}
		migrate.RunMigrations(&cfg.Database, command)
		return
	}
	{{end}}

	// Initialize database
	cfg.Database.Type = strings.ToLower(cfg.Database.Type)
	db, err := database.Connect(cfg.Database)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}

	// Initialize validator
	validator := utils.NewValidator()
	{{- if or (eq .Tool "sqlx") (eq .Tool "sqlc")}}
	defer db.Close()
	{{- end}}

	// Create Fiber app
	app := fiber.New(fiber.Config{
		ReadTimeout:  time.Duration(cfg.Server.ReadTimeout) * time.Second,
		WriteTimeout: time.Duration(cfg.Server.WriteTimeout) * time.Second,
		IdleTimeout:  time.Duration(cfg.Server.IdleTimeout) * time.Second,
		ErrorHandler: func(ctx *fiber.Ctx, err error) error {
			code := fiber.StatusInternalServerError
			if e, ok := err.(*fiber.Error); ok {
				code = e.Code
			}
			return ctx.Status(code).JSON(fiber.Map{
				"error":   true,
				"message": err.Error(),
			})
		},
	})

	// Add middleware
	app.Use(logger.New())
	app.Use(recover.New())
	app.Use(cors.New(cors.Config{
		AllowOrigins: "*",
		AllowMethods: "GET,POST,PUT,DELETE,OPTIONS",
		AllowHeaders: "Origin,Content-Type,Accept,Authorization",
	}))
	app.Use(requestid.New())

	// Custom middleware
	app.Use(middleware.RequestLogger())

	// Setup routes
	routes.Setup(app, db, validator)

	// Create shutdown channel
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// Start server in goroutine
	go func() {
		log.Printf("Starting Fiber server on port %s", cfg.Server.Port)
		log.Printf("Version: %s, Commit: %s, Build Time: %s", version, commit, buildTime)

		if err := app.Listen(fmt.Sprintf(":%s", cfg.Server.Port)); err != nil {
			log.Fatalf("Failed to start server: %v", err)
		}
	}()

	// Wait for interrupt signal
	<-quit
	log.Println("Shutting down server...")

	// Create shutdown context with timeout
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Shutdown server gracefully
	if err := app.ShutdownWithContext(ctx); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}

	{{- if eq .Tool "gorm"}}
	// Close database connection
	sqlDB, err := db.DB()
	if err == nil {
		sqlDB.Close()
	}
	{{- end}}

	log.Println("Server exited")
}
