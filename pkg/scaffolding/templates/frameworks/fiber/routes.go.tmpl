{{if eq .Architecture "simple"}}package routes

import (
	"{{.ModulePath}}/internal/handlers"
	"{{.ModulePath}}/internal/repositories"
	"{{.ModulePath}}/internal/services"
	"{{.ModulePath}}/internal/utils"

	"github.com/gofiber/fiber/v2"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

// Setup configures all the routes
func Setup(app *fiber.App, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}, validator *utils.Validator) {
	// Initialize dependencies
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(userService, validator)

	// Health check endpoint
	app.Get("/health", handlers.HealthCheck)

	// API version 1 routes
	v1 := app.Group("/api/v1")
	{
		// User routes
		users := v1.Group("/users")
		{
			users.Get("", userHandler.GetUsers)
			users.Get("/:id", userHandler.GetUser)
			users.Post("", userHandler.CreateUser)
			users.Put("/:id", userHandler.UpdateUser)
			users.Delete("/:id", userHandler.DeleteUser)
		}
	}
}
{{else if eq .Architecture "clean"}}package http

import (
	"{{.ModulePath}}/domain/usecases"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/interfaces/handlers"

	"github.com/gofiber/fiber/v2"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

func SetupRoutes(app *fiber.App, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}) {
	// Setup repositories
	var userRepository usecases.UserRepository
	{{if eq .Tool "gorm"}}
	userRepository = database.NewGormUserRepository(db)
	{{else if eq .Tool "sqlx"}}
	userRepository = database.NewSqlxUserRepository(db)
	{{else if eq .Tool "sqlc"}}
	userRepository = database.NewSqlcUserRepository(db)
	{{end}}

	// Setup services
	userService := usecases.NewUserUsecase(userRepository)

	// Setup handlers
	userHandler := handlers.NewUserHandler(userService)

	// API version 1 routes
	v1 := app.Group("/api/v1")
	{
		users := v1.Group("/users")
		{
			users.Post("", userHandler.CreateUser)
			users.Get("/:id", userHandler.GetUser)
			users.Get("", userHandler.GetAllUsers)
			users.Put("/:id", userHandler.UpdateUser)
			users.Delete("/:id", userHandler.DeleteUser)
		}
	}
}
{{else if eq .Architecture "ddd"}}package routes

import (
	"{{.ModulePath}}/domain/repositories"
	"{{.ModulePath}}/domain/services"
	infra_repo "{{.ModulePath}}/infrastructure/repositories"
	"{{.ModulePath}}/interfaces/handlers"
	"{{.ModulePath}}/domain/utils"

	"github.com/gofiber/fiber/v2"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

// Setup configures all the routes
func Setup(app *fiber.App, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}, validator *utils.Validator) {
	// Initialize dependencies
	var userRepository repositories.UserRepository
	{{if eq .Tool "gorm"}}
	userRepository = infra_repo.NewGormUserRepository(db)
	{{else if eq .Tool "sqlx"}}
	userRepository = infra_repo.NewSqlxUserRepository(db)
	{{else if eq .Tool "sqlc"}}
	userRepository = infra_repo.NewSqlcUserRepository(db)
	{{end}}

	userService := services.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(userService, validator)

	// Health check endpoint
	app.Get("/health", handlers.HealthCheck)

	// API version 1 routes
	v1 := app.Group("/api/v1")
	{
		// User routes
		users := v1.Group("/users")
		{
			users.Get("", userHandler.GetAll)
			users.Get("/:id", userHandler.GetByID)
			users.Post("", userHandler.Create)
			users.Put("/:id", userHandler.Update)
			users.Delete("/:id", userHandler.Delete)
		}
	}
}
{{else if eq .Architecture "hexagonal"}}package routes

import (
	"{{.ModulePath}}/adapters/secondary/database"
	"{{.ModulePath}}/applications/services"
	"{{.ModulePath}}/ports"

	"github.com/gofiber/fiber/v2"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

func SetupRoutes(app *fiber.App, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}) {
	// Setup repositories
	var userRepository ports.UserRepository
	{{if eq .Tool "gorm"}}
	userRepository = database.NewGormUserRepository(db)
	{{else if eq .Tool "sqlx"}}
	userRepository = database.NewSqlxUserRepository(db)
	{{else if eq .Tool "sqlc"}}
	userRepository = database.NewSqlcUserRepository(db)
	{{end}}

	// Setup services
	userService := services.NewUserService(userRepository)

	// Setup handlers
	userHandler := NewUserHandler(userService)

	// API version 1 routes
	v1 := app.Group("/api/v1")
	{
		users := v1.Group("/users")
		{
			users.Post("", userHandler.Create)
			users.Get("/:id", userHandler.GetByID)
			users.Get("", userHandler.GetAll)
			users.Put("/:id", userHandler.Update)
			users.Delete("/:id", userHandler.Delete)
		}
	}
}
{{end}}
