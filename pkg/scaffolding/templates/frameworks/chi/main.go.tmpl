package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"

	"{{.ModulePath}}/internal/utils"
	{{if eq .Architecture "simple" -}}
	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/database"
	"{{.ModulePath}}/internal/routes"
	"{{.ModulePath}}/internal/migrate"
	{{else if eq .Architecture "ddd" -}}
	"{{.ModulePath}}/application"
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/infrastructure/persistence"
	"{{.ModulePath}}/interfaces/handlers"
	"{{.ModulePath}}/interfaces/routes"
	{{else if eq .Architecture "clean" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/infrastructure/database"
	{{if eq .Tool "gorm"}}"{{.ModulePath}}/infrastructure/repositories"{{end}}
	"{{.ModulePath}}/interfaces/routes"
	{{else if eq .Architecture "hexagonal" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/adapters/primary/http/routes"
	"{{.ModulePath}}/adapters/secondary/database"
	{{end -}}
)

var (
	version   = "dev"
	commit    = "unknown"
	buildTime = "unknown"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	// Initialize database
	cfg.Database.Type = strings.ToLower(cfg.Database.Type)
	db, err := database.Connect(cfg.Database)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	{{- if or (eq .Tool "sqlx") (eq .Tool "sqlc")}}
	defer db.Close()
	// Run migrations
	if err := utils.RunMigrations(db, cfg.Database.Type, "./migrations"); err != nil {
		log.Fatalf("could not run migrations: %v", err)
	}
	{{- end}}

	{{if eq .Tool "gorm"}}
	// Run migrations
	migrate.RunGormAutoMigration(db)
	{{if or (eq .Architecture "ddd") (eq .Architecture "clean")}}
	if err := db.AutoMigrate(repositories.UserPersistence{}); err != nil {
		log.Fatalf("Failed to migrate database: %v", err)
	}
	{{else if eq .Architecture "hexagonal"}}
	if err := db.AutoMigrate(database.UserPersistence{}); err != nil {
		log.Fatalf("Failed to migrate database: %v", err)
	}
	{{end}}
	{{end}}

	// Initialize validator
	validator := utils.NewValidator()

	// Create Chi router
	r := chi.NewRouter()

	// Add middleware
	r.Use(middleware.RequestID)
	r.Use(middleware.RealIP)
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)

	// Setup routes
	{{if eq .Architecture "ddd"}}
	userRepo := persistence.NewSQLUserRepository(db)
	userService := application.NewUserApplicationService(userRepo)
	userHandler := handlers.NewUserHandler(userService, validator)
	routes.Setup(r, userHandler)
	{{else}}
	routes.Setup(r, db, validator)
	{{end}}

	// Create HTTP server
	server := &http.Server{
		Addr:         fmt.Sprintf(":%s", cfg.Server.Port),
		Handler:      r,
		ReadTimeout:  5 * time.Second,
		WriteTimeout: 10 * time.Second,
		IdleTimeout:  120 * time.Second,
	}

	// Start server in goroutine
	go func() {
		log.Printf("Starting server on port %s", cfg.Server.Port)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Could not listen on %s: %v\n", cfg.Server.Port, err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit
	log.Println("Shutting down server...")

	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	if err := server.Shutdown(ctx); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}

	log.Println("Server exiting")
}
