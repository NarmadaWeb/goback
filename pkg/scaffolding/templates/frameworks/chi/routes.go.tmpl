{{if eq .Architecture "simple"}}package routes

import (
	"encoding/json"
	"net/http"

	"github.com/go-chi/chi/v5"
	"{{.ModulePath}}/internal/handlers"
	"{{.ModulePath}}/internal/repositories"
	"{{.ModulePath}}/internal/services"
	"{{.ModulePath}}/internal/utils"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

func Setup(r chi.Router, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}, validator *utils.Validator) {
	// Initialize dependencies
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(userService, validator)

	// API routes
	r.Route("/api/v1", func(r chi.Router) {
		// User routes
		r.Route("/users", func(r chi.Router) {
			r.Get("/", userHandler.GetUsers)
			r.Post("/", userHandler.CreateUser)
			r.Get("/{id}", userHandler.GetUser)
			r.Put("/{id}", userHandler.UpdateUser)
			r.Delete("/{id}", userHandler.DeleteUser)
		})
	})

	// Health check
	r.Get("/health", healthCheckHandler)
}

func healthCheckHandler(w http.ResponseWriter, r *http.Request) {
	response := map[string]interface{}{
		"status":  "healthy",
		"service": "{{.ProjectName}}",
		"version": "1.0.0",
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}
{{else if eq .Architecture "clean"}}package http

import (
	"{{.ModulePath}}/domain/usecases"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/interfaces/handlers"

	"github.com/go-chi/chi/v5"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

func SetupRoutes(r *chi.Mux, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}) {
	// Setup repositories
	var userRepository usecases.UserRepository
	{{if eq .Tool "gorm"}}
	userRepository = database.NewGormUserRepository(db)
	{{else if eq .Tool "sqlx"}}
	userRepository = database.NewSqlxUserRepository(db)
	{{else if eq .Tool "sqlc"}}
	userRepository = database.NewSqlcUserRepository(db)
	{{end}}

	// Setup services
	userService := usecases.NewUserUsecase(userRepository)

	// Setup handlers
	userHandler := handlers.NewUserHandler(userService)

	// API version 1 routes
	r.Route("/api/v1", func(r chi.Router) {
		r.Route("/users", func(r chi.Router) {
			r.Post("/", userHandler.CreateUser)
			r.Get("/{id}", userHandler.GetUser)
			r.Get("/", userHandler.GetAllUsers)
			r.Put("/{id}", userHandler.UpdateUser)
			r.Delete("/{id}", userHandler.DeleteUser)
		})
	})
}
{{else}}package http

import (
	"{{.ModulePath}}/adapters/secondary/database"
	"{{.ModulePath}}/application/services"
	"{{.ModulePath}}/ports"

	"github.com/go-chi/chi/v5"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

func SetupRoutes(r *chi.Mux, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}) {
	// Setup repositories
	var userRepository ports.UserRepository
	{{if eq .Tool "gorm"}}
	userRepository = database.NewGormUserRepository(db)
	{{else if eq .Tool "sqlx"}}
	userRepository = database.NewSqlxUserRepository(db)
	{{else if eq .Tool "sqlc"}}
	userRepository = database.NewSqlcUserRepository(db)
	{{end}}

	// Setup services
	userService := services.NewUserService(userRepository)

	// Setup handlers
	userHandler := NewUserHandler(userService)

	// API version 1 routes
	r.Route("/api/v1", func(r chi.Router) {
		r.Route("/users", func(r chi.Router) {
			r.Post("/", userHandler.Create)
			r.Get("/{id}", userHandler.GetByID)
			r.Get("/", userHandler.GetAll)
			r.Put("/{id}", userHandler.Update)
			r.Delete("/{id}", userHandler.Delete)
		})
	})
}
{{end}}
