package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"

	{{- if eq .Tool "sqlc" }}
	{{if eq .Database "postgresql"}}"github.com/jackc/pgx/v5/pgxpool"{{end}}
	{{end}}

	{{if eq .Architecture "simple" -}}
	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/database"
	"{{.ModulePath}}/internal/middleware"
	"{{.ModulePath}}/internal/utils"
	{{if eq .Tool "gorm"}}"{{.ModulePath}}/internal/migrate" {{end}}
	"{{.ModulePath}}/internal/routes"
	
	{{else if eq .Architecture "ddd" -}}
	"{{.ModulePath}}/config"
	{{if eq .Tool "gorm"}}"{{.ModulePath}}/pkg/migrate"{{end}}
	"{{.ModulePath}}/domain/utils"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/interfaces/routes"
	
	{{else if eq .Architecture "clean" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/domain"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/infrastructure/repositories"
	"{{.ModulePath}}/interfaces/middleware"
	"{{.ModulePath}}/interfaces/routes"
	
	{{else if eq .Architecture "hexagonal" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/adapters/primary/http/middleware"
	"{{.ModulePath}}/adapters/primary/http/routes"
	"{{.ModulePath}}/adapters/secondary/database"
	"{{.ModulePath}}/application/domain"
	{{end}}
)

var (
	version   = "dev"
	commit    = "unknown"
	buildTime = "unknown"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	// Set Gin mode
	if cfg.Server.Mode == "production" {
		gin.SetMode(gin.ReleaseMode)
	} else {
		gin.SetMode(gin.DebugMode)
	}
	
	// Initialize database
	cfg.Database.Type = strings.ToLower(cfg.Database.Type)
	{{- if eq .Tool "sqlc" }}
	db, err := database.Connect(&cfg.Database)
	{{- else}}
	db, err := database.Connect(cfg.Database)
	{{end}}
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	
	// Handle database cleanup based on the tool
	{{- if eq .Tool "sqlc"}}
	defer func() {
		if pool, ok := db.(*pgxpool.Pool); ok && pool != nil {
			pool.Close()
			log.Println("PostgreSQL connection pool closed.")
		}
	}()
	{{end}}

	{{if eq .Tool "gorm"}}
	// Run Gorm migrations.
	{{if eq .Architecture "simple"}}
	migrate.RunGormAutoMigration(db)
	{{else if eq .Architecture "ddd"}}
	migrate.RunGormAutoMigration(db)
	{{else if eq .Architecture "clean"}}
	if err := db.AutoMigrate(&domain.User{}); err != nil {
		log.Fatalf("Failed to auto-migrate database: %v", err)
	}
	{{else if eq .Architecture "hexagonal"}}
	if err := db.AutoMigrate(&domain.User{}); err != nil {
		log.Fatalf("Failed to auto-migrate database: %v", err)
	}
	{{end}}
	{{end}}

	// Initialize validator
	validator := utils.NewValidator()

	// Create Gin router
	router := gin.New()

	// Add middleware
	router.Use(gin.Logger())   // Standard logger
	router.Use(gin.Recovery()) // Recovery from panics
	router.Use(cors.New(cors.Config{
		AllowOrigins:     []string{"*"},
		AllowMethods:     []string{"GET", "POST", "PUT", "DELETE", "OPTIONS"},
		AllowHeaders:     []string{"Origin", "Content-Type", "Accept", "Authorization"},
		ExposeHeaders:    []string{"Content-Length"},
		AllowCredentials: true,
		MaxAge: 12 * time.Hour,
	}))

	// Setup routes
	routes.Setup(router, db, validator)

	// Create HTTP server
	server := &http.Server{
		Addr:         fmt.Sprintf(":%s", cfg.Server.Port),
		Handler:      router,
		ReadTimeout:  time.Duration(cfg.Server.ReadTimeout) * time.Second,
		WriteTimeout: time.Duration(cfg.Server.WriteTimeout) * time.Second,
		IdleTimeout:  time.Duration(cfg.Server.IdleTimeout) * time.Second,
	}

	// Create shutdown channel
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)

	// Start server in a goroutine
	go func() {
		log.Printf("Starting Gin server on port %s", cfg.Server.Port)
		log.Printf("Version: %s, Commit: %s, Build Time: %s", version, commit, buildTime)
		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Could not start server: %v", err)
		}
	}()

	// Wait for interrupt signal
	<-quit
	log.Println("Shutting down server...")

	// Create a context for shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Shutdown the server
	if err := server.Shutdown(ctx); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}

	{{- if eq .Tool "gorm"}}
	// Close Gorm's underlying database connection
	if sqlDB, err := db.DB(); err == nil && sqlDB != nil {
		sqlDB.Close()
		log.Println("Gorm underlying SQL database connection closed.")
	}
	{{- end}}

	log.Println("Server exited gracefully")
}