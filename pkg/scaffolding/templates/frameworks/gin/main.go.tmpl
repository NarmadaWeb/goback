package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strings"
	"syscall"
	"time"

	{{if eq .Architecture "simple" -}}
	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/database"
	"{{.ModulePath}}/internal/middleware"
	"{{.ModulePath}}/internal/routes"
	"{{.ModulePath}}/internal/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/internal/migrate"
	{{end -}}
	{{else if eq .Architecture "ddd" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/interfaces/middleware"
	"{{.ModulePath}}/interfaces/routes"
	"{{.ModulePath}}/domain/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/pkg/migrate"
	{{end -}}
	{{else if eq .Architecture "clean" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/infrastructure/database"
	"{{.ModulePath}}/interfaces/middleware"
	"{{.ModulePath}}/interfaces/routes"
	"{{.ModulePath}}/domain/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/pkg/migrate"
	{{end -}}
	{{else if eq .Architecture "hexagonal" -}}
	"{{.ModulePath}}/config"
	"{{.ModulePath}}/adapters/secondary/database"
	"{{.ModulePath}}/adapters/primary/http/middleware"
	"{{.ModulePath}}/adapters/primary/http/routes"
	"{{.ModulePath}}/domain/utils"
	{{if eq .Tool "gorm" -}}
	"{{.ModulePath}}/pkg/migrate"
	{{end -}}
	{{end -}}
	"github.com/gin-gonic/gin"
)

var (
	version   = "dev"
	commit    = "unknown"
	buildTime = "unknown"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	{{if eq .Tool "gorm"}}
	// Handle migrations
	if len(os.Args) > 1 && os.Args[1] == "migrate" {
		command := "up"
		if len(os.Args) > 2 {
			command = os.Args[2]
		}
		migrate.RunMigrations(&cfg.Database, command)
		return
	}
	{{end}}

	// Set Gin mode
	gin.SetMode(cfg.Server.Mode)

	// Initialize database
	cfg.Database.Type = strings.ToLower(cfg.Database.Type)
	db, err := database.Connect(cfg.Database)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}
	{{- if or (eq .Tool "sqlx") (eq .Tool "sqlc")}}
	defer db.Close()
	{{- end}}

	// Initialize validator
	validator := utils.NewValidator()

	// Create Gin router
	router := gin.New()

	// Add middleware
	router.Use(gin.Logger())
	router.Use(gin.Recovery())
	router.Use(middleware.CORS())
	router.Use(middleware.RequestID())

	// Setup routes
	routes.Setup(router, db, cfg, validator)

	// Create HTTP server
	server := &http.Server{
		Addr:           fmt.Sprintf(":%s", cfg.Server.Port),
		Handler:        router,
		ReadTimeout:    time.Duration(cfg.Server.ReadTimeout) * time.Second,
		WriteTimeout:   time.Duration(cfg.Server.WriteTimeout) * time.Second,
		IdleTimeout:    time.Duration(cfg.Server.IdleTimeout) * time.Second,
		MaxHeaderBytes: cfg.Server.MaxHeaderBytes,
	}

	// Start server in goroutine
	go func() {
		log.Printf("Starting server on port %s", cfg.Server.Port)
		log.Printf("Version: %s, Commit: %s, Build Time: %s", version, commit, buildTime)

		if err := server.ListenAndServe(); err != nil && err != http.ErrServerClosed {
			log.Fatalf("Failed to start server: %v", err)
		}
	}()

	// Wait for interrupt signal to gracefully shutdown the server
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("Shutting down server...")

	// Create a deadline for shutdown
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	// Shutdown server
	if err := server.Shutdown(ctx); err != nil {
		log.Fatalf("Server forced to shutdown: %v", err)
	}

	{{- if eq .Tool "gorm"}}
	// Close database connection
	sqlDB, err := db.DB()
	if err == nil {
		sqlDB.Close()
	}
	{{- end}}

	log.Println("Server exited")
}
