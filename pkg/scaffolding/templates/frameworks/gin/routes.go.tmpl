package routes

import (
	"net/http"
	
	"github.com/gin-gonic/gin"
	{{- if eq .Tool "gorm" }}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx" }}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc" }}
	db_sqlc "{{.ModulePath}}/db/sqlc"
	{{- end }}

	{{if eq .Architecture "simple" -}}
	"{{.ModulePath}}/internal/handlers"
	"{{.ModulePath}}/internal/repositories"
	"{{.ModulePath}}/internal/services"
	"{{.ModulePath}}/internal/utils"
	{{else if eq .Architecture "ddd" -}}
	"{{.ModulePath}}/domain/repositories"
	"{{.ModulePath}}/domain/services"
	infra_repo "{{.ModulePath}}/infrastructure/repositories"
	"{{.ModulePath}}/interfaces/handlers"
	"{{.ModulePath}}/domain/utils"
	{{else if eq .Architecture "clean" -}}
	"{{.ModulePath}}/domain/usecases"
	"{{.ModulePath}}/infrastructure/repositories"
	"{{.ModulePath}}/interfaces/handlers"
	"{{.ModulePath}}/domain/utils"
	{{else if eq .Architecture "hexagonal" -}}
	"{{.ModulePath}}/adapters/primary/http/handlers"
	"{{.ModulePath}}/adapters/secondary/database"
	"{{.ModulePath}}/application/services"
	"{{.ModulePath}}/domain/ports"
	"{{.ModulePath}}/domain/utils"
	{{end}}
)

// Setup configures all the application routes on the Gin router.
func Setup(router *gin.Engine, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}db_sqlc.DBTX{{end}}, validator *utils.Validator) {
	{{if eq .Architecture "simple" -}}
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(userService, validator)
	{{else if eq .Architecture "ddd" -}}
	// Initialize dependencies
	var userRepository repositories.UserRepository
	{{if eq .Tool "gorm"}}
	userRepository = infra_repo.NewGormUserRepository(db)
	{{else if eq .Tool "sqlx"}}
	userRepository = infra_repo.NewSqlxUserRepository(db)
	{{else if eq .Tool "sqlc"}}
	userRepository = infra_repo.NewSqlcUserRepository(db)
	{{end}}

	userService := services.NewUserApplicationService(userRepository)
	userHandler := handlers.NewUserHandler(userService, validator)
	{{else if eq .Architecture "clean" -}}
	userRepository := repositories.NewUserRepository(db)
	userUsecase := usecases.NewUserUsecase(userRepository)
	userHandler := handlers.NewUserHandler(userUsecase, validator)
	{{else if eq .Architecture "hexagonal" -}}
	userRepository := database.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(userService, validator)
	{{end}}

	// Health check endpoint
	router.GET("/health", handlers.HealthCheck)

	// API version 1 routes
	v1 := router.Group("/api/v1")
	{
		users := v1.Group("/users")
		{
			users.GET("", userHandler.GetAll)
			users.POST("", userHandler.Create)
			users.GET("/:id", userHandler.GetByID)
			users.PUT("/:id", userHandler.Update)
			users.DELETE("/:id", userHandler.Delete)
		}
	}

	// Handle routes that are not found
	router.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusNotFound, gin.H{"error": "route not found"})
	})
}