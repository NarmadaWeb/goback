{{if eq .Architecture.String "simple"}}package routes

import (
	"net/http"

	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/handlers"
	"{{.ModulePath}}/internal/repositories"
	"{{.ModulePath}}/internal/services"
	"{{.ModulePath}}/internal/utils"

	"github.com/gin-gonic/gin"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

// Setup configures all the routes
func Setup(router *gin.Engine, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}, cfg *config.Config, validator *utils.Validator) {
	// Initialize dependencies
	userRepository := repositories.NewUserRepository(db)
	userService := services.NewUserService(userRepository)
	userHandler := handlers.NewUserHandler(userService, validator)
	healthHandler := handlers.NewHealthHandler()

	// Health check endpoint
	router.GET("/health", healthCheck)

	// API version 1 routes
	v1 := router.Group("/api/v1")
	{
		// Health routes
		v1.GET("/health", healthHandler.Check)
		v1.GET("/ready", healthHandler.Ready)

		// User routes
		users := v1.Group("/users")
		{
			users.GET("", userHandler.GetUsers)
			users.GET("/:id", userHandler.GetUser)
			users.POST("", userHandler.CreateUser)
			users.PUT("/:id", userHandler.UpdateUser)
			users.DELETE("/:id", userHandler.DeleteUser)
		}
	}

	// Catch-all route for undefined endpoints
	router.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "Route not found",
			"path":  c.Request.URL.Path,
		})
	})
}

// healthCheck is a simple health check endpoint
func healthCheck(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"status":  "ok",
		"service": "{{.ProjectName}}",
		"version": "1.0.0",
	})
}
{{else}}package http

import (
	"{{.ModulePath}}/adapters/secondary/database"
	"{{.ModulePath}}/application/services"
	"{{.ModulePath}}/ports"

	"github.com/gin-gonic/gin"
	{{- if eq .Tool "gorm"}}
	"gorm.io/gorm"
	{{- else if eq .Tool "sqlx"}}
	"github.com/jmoiron/sqlx"
	{{- else if eq .Tool "sqlc"}}
	"database/sql"
	{{- end}}
)

func SetupRoutes(router *gin.Engine, db {{if eq .Tool "gorm"}}*gorm.DB{{else if eq .Tool "sqlx"}}*sqlx.DB{{else if eq .Tool "sqlc"}}*sql.DB{{end}}) {
	// Setup repositories
	var userRepository ports.UserRepository
	{{if eq .Tool "gorm"}}
	userRepository = database.NewGormUserRepository(db)
	{{else if eq .Tool "sqlx"}}
	userRepository = database.NewSqlxUserRepository(db)
	{{else if eq .Tool "sqlc"}}
	userRepository = database.NewSqlcUserRepository(db)
	{{end}}
	
	// Setup services
	userService := services.NewUserService(userRepository)

	// Setup handlers
	userHandler := NewUserHandler(userService)
	
	// API version 1 routes
	v1 := router.Group("/api/v1")
	{
		users := v1.Group("/users")
		{
			users.POST("", userHandler.Create)
			users.GET("/:id", userHandler.GetByID)
			users.GET("", userHandler.GetAll)
			users.PUT("/:id", userHandler.Update)
			users.DELETE("/:id", userHandler.Delete)
		}
	}
}
{{end}}
