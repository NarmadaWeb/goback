package main

import (
	"errors"
	"log"
	"os"

	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/database"
	"github.com/golang-migrate/migrate/v4"
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/database/mysql"
	_ "github.com/golang-migrate/migrate/v4/database/sqlite3"
	_ "github.com/golang-migrate/migrate/v4/source/file"
)

func main() {
	log.Println("Starting database migration...")

	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("cannot load config: %v", err)
	}

	dsn := cfg.Database.GetMigrationDSN()
	if dsn == "" {
		log.Fatal("database DSN is empty")
	}

	m, err := migrate.New("file://db/migrations", dsn)
	if err != nil {
		log.Fatalf("failed to create migrate instance: %v", err)
	}

	direction := "up"
	if len(os.Args) > 1 {
		direction = os.Args[1]
	}

	switch direction {
	case "up":
		log.Println("Applying migrations...")
		if err := m.Up(); err != nil && !errors.Is(err, migrate.ErrNoChange) {
			log.Fatalf("failed to apply migrations: %v", err)
		}
		log.Println("Migrations applied successfully.")
	case "down":
		log.Println("Reverting migrations...")
		if err := m.Down(); err != nil && !errors.Is(err, migrate.ErrNoChange) {
			log.Fatalf("failed to revert migrations: %v", err)
		}
		log.Println("Migrations reverted successfully.")
	case "drop":
		log.Println("Dropping all migrations...")
		if err := m.Drop(); err != nil {
			log.Fatalf("failed to drop migrations: %v", err)
		}
		log.Println("All migrations dropped successfully.")
	default:
		log.Fatalf("invalid migration direction: %s. Use 'up', 'down', or 'drop'", direction)
	}
}
