version: '3.8'

services:
  {{.ProjectName}}:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        - GO_VERSION=1.22
        - BUILD_VERSION=1.0.0
    container_name: {{.ProjectName}}-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      - PORT=8080
      - APP_ENV=${APP_ENV:-production}
{{- if eq .Framework "gin"}}
      - GIN_MODE=${GIN_MODE:-release}
{{- else if eq .Framework "fiber"}}
      - FIBER_PREFORK=false
{{- else if eq .Framework "echo"}}
      - ECHO_DEBUG=false
{{- end}}
{{- if eq .Database "postgresql"}}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${POSTGRES_USER:-postgres}
      - DB_PASSWORD=${POSTGRES_PASSWORD:-password}
      - DB_NAME=${POSTGRES_DB:-{{.ProjectName}}_db}
      - DB_SSLMODE=disable
{{- else if eq .Database "mysql"}}
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_USER=${MYSQL_USER:-root}
      - DB_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
      - DB_NAME=${MYSQL_DATABASE:-{{.ProjectName}}_db}
{{- else if eq .Database "sqlite"}}
      - DB_PATH=/app/data/{{.ProjectName}}.db
{{- end}}
      - JWT_SECRET=${JWT_SECRET:-your-secret-key-change-in-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
{{- if eq .Database "sqlite"}}
      - {{.ProjectName}}_data:/app/data
{{- end}}
      - ./configs:/app/configs:ro
      - ./logs:/app/logs
     depends_on:
{{- if eq .Database "postgresql"}}
      postgres:
        condition: service_healthy
{{- else if eq .Database "mysql"}}
      mysql:
        condition: service_healthy
{{- end}}
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

{{- if eq .Database "postgresql"}}
  postgres:
    image: postgres:16-alpine
    container_name: {{.ProjectName}}-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_DB=${POSTGRES_DB:-{{.ProjectName}}_db}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256 --auth-local=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./scripts/postgres.conf:/etc/postgresql/postgresql.conf:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - {{.ProjectName}}-network
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-{{.ProjectName}}_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

{{- else if eq .Database "mysql"}}
  mysql:
    image: mysql:8.4
    container_name: {{.ProjectName}}-mysql
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-{{.ProjectName}}_db}
      - MYSQL_USER=${MYSQL_USER:-app}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
      - ./scripts/mysql.cnf:/etc/mysql/conf.d/custom.cnf:ro
    ports:
      - "${MYSQL_PORT:-3306}:3306"
    networks:
      - {{.ProjectName}}-network
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    logging:
      driver: json-file
      options:
        max-size: 10m
        max-file: "3"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD:-password}"]
      interval: 10s
      timeout: 5s
      retries: 5
{{- end}}

{{- if .DevOps.Enabled}}
  nginx:
    image: nginx:alpine
    container_name: {{.ProjectName}}-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./deployments/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployments/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./deployments/nginx/ssl:/etc/nginx/ssl:ro
      - ./static:/var/www/static:ro
    depends_on:
      {{.ProjectName}}:
        condition: service_healthy
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3
    profiles:
      - proxy

  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: {{.ProjectName}}-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./deployments/monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - {{.ProjectName}}-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 3s
      retries: 3
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:10.2.0
    container_name: {{.ProjectName}}-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deployments/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_healthy
    networks:
      - {{.ProjectName}}-network
    user: "472"
    profiles:
      - monitoring

  jaeger:
    image: jaegertracing/all-in-one:1.50
    container_name: {{.ProjectName}}-jaeger
    restart: unless-stopped
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - {{.ProjectName}}-network
    profiles:
      - monitoring
{{- end}}

volumes:
{{- if eq .Database "postgresql"}}
  postgres_data:
    driver: local
{{- else if eq .Database "mysql"}}
  mysql_data:
    driver: local
{{- else if eq .Database "sqlite"}}
  {{.ProjectName}}_data:
    driver: local
{{- end}}
{{- if .DevOps.Enabled}}
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
{{- end}}

networks:
  {{.ProjectName}}-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Environment configuration
# Create .env file for local development:
#
# # Application
# APP_ENV=development
# API_PORT=8080
# LOG_LEVEL=debug
# JWT_SECRET=your-development-secret
#
# # Database
{{- if eq .Database "postgresql"}}
# POSTGRES_USER=postgres
# POSTGRES_PASSWORD=password
# POSTGRES_DB={{.ProjectName}}_db
# POSTGRES_PORT=5432
{{- else if eq .Database "mysql"}}
# MYSQL_ROOT_PASSWORD=password
# MYSQL_USER=app
# MYSQL_PASSWORD=password
# MYSQL_DATABASE={{.ProjectName}}_db
# MYSQL_PORT=3306
{{- end}}
#
{{- if .DevOps.Enabled}}
# # Monitoring
# PROMETHEUS_PORT=9090
# GRAFANA_PORT=3000
# GRAFANA_USER=admin
# GRAFANA_PASSWORD=admin
# JAEGER_UI_PORT=16686
#
# # Nginx
# NGINX_HTTP_PORT=80
# NGINX_HTTPS_PORT=443
{{- end}}
#
# Development override file example:
# Create docker-compose.override.yml for local development:
#
# version: '3.8'
# services:
#   {{.ProjectName}}:
#     build:
#       target: development
#     volumes:
#       - .:/app
#       - go-mod-cache:/go/pkg/mod
#     environment:
#       - APP_ENV=development
{{- if eq .Framework "gin"}}
#       - GIN_MODE=debug
{{- else if eq .Framework "echo"}}
#       - ECHO_DEBUG=true
{{- end}}
#     command: air -c .air.toml
#
# volumes:
#   go-mod-cache:
