# üöÄ {{.ProjectName | title}} Backend Service

{{if .Description}}{{.Description}}{{else}}A modern, robust, and high-performance backend application built with Go, utilizing the **{{.Architecture | printf "%s" | title}}** architectural pattern.{{end}}

## ‚ú® Features

-   **Architecture:** Implements the **{{.Architecture | printf "%s" | title}}** pattern for scalable and maintainable code.
-   **Database Tooling:** Uses **{{.Tool}}** for efficient data interaction.
-   **Web Framework:** Powered by the **{{.Framework}}** web framework.
-   **Observability:** Built-in logging and error handling.

## üõ†Ô∏è Prerequisites

Before getting started, ensure you have the following installed:

-   Go (1.21 or newer)
{{- if .Database}}
-   A running **{{.Database | printf "%s" | toTitle}}** Database instance.
{{- end}}
-   `make` utility (for automation scripts)
-   `migrate` CLI tool (required for managing schema migrations)
{{- if eq .Tool "sqlc"}}
-   `sqlc` CLI tool (required for generating data access code)
{{- end}}

## üì¶ Getting Started

### 1. Installation

```bash
# Clone the repository
git clone https://github.com/your-username/{{.ProjectName}}.git
cd {{.ProjectName}}

# Download Go dependencies
go mod tidy
```

### 2. Database Preparation & Code Generation

This step is crucial for synchronizing your Go code with the database schema.

{{- if eq .Tool "sqlc"}}
#### 3. Generate Type-Safe Code (SQLC)

Since we use **sqlc**, you must generate the Go code from the `.sql` query files before compiling:

```bash
sqlc generate
```

#### 4. Apply Schema Migrations

Apply the initial database schema using the `make` utility:

```bash
make migrate/up
```

{{- else if eq .Tool "sqlx"}}
#### Apply Schema Migrations (SQLX)

Apply the initial database schema using the `make` utility:

```bash
make migrate/up
```
{{- end}}

### 4. Running the Application

Start the development server with hot reloading enabled (requires `air`):

```bash
make dev
```
The service will be accessible at `http://localhost:8080`.

---

## ‚öôÔ∏è Development Commands

Use the provided `Makefile` for streamlined development tasks:

| Command | Action |
| :--- | :--- |
| `make help` | Info command. |
| `make dev` | Run the server with hot reload. |
| `make build` | Build the final executable binary. |
| `make test` | Run all unit tests. |
| `make lint` | Execute code linting using `golangci-lint`. |
| `make migrate/create name=new_feature` | Create new timestamped migration files. |
| `make migrate/up` | Apply all pending migrations. |
{{- if eq .Tool "sqlc"}}
| `make sqlc-generate` | Manually run SQLC code generation. |
{{- end}}
```