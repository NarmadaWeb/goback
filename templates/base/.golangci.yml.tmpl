# .golangci.yml
# See https://golangci-lint.run/usage/configuration/ for all available options.

run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m

  # exit-on-error: if set to false, golangci-lint will exit with code 0 even if
  # issues are found. This is useful for CI/CD pipelines.
  exit-on-error: true

  # which dirs to skip: they won't be analyzed;
  # can use regexp here, must be valid
  skip-dirs:
    - vendor
    - bin
    - obj
    - .idea
    - .vscode

linters-settings:
  govet:
    # report about shadowed variables
    check-shadowing: true
  gofmt:
    # simplify code: gofmt -s
    simplify: true
  goimports:
    # put imports in blocks
    local-prefixes: {{.ModulePath}}
  misspell:
    # Correct commonly misspelled English words in source files.
    locale: US
  lll:
    # max line length, lines with more characters will be reported.
    line-length: 120

linters:
  # please, do not use `enable-all`: it's slow and may report obscure issues.
  # inverted configuration with `enable` is preferred to `disable`.
  # `enable` is the list of linters to run.
  # `disable` is the list of linters to not run.
  # Default is `disable: []` and `enable: [ ... ]`
  enable:
    - govet
    - gofmt
    - goimports
    - misspell
    - lll
    - errcheck
    - staticcheck
    - unused
    - ineffassign
    - typecheck
    - gosimple
    - deadcode
    - structcheck
    - varcheck

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files.
    - path: _test\.go
      linters:
        - errcheck # functions in tests often don't need to have their errors checked
        - gosec    # tests are not production code

    # Exclude known false-positives
    - text: "File is not `gofmt`-ed with `-s`"
      linters:
        - gofmt

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate|html|junit-xml
  format: colored-line-number

  # print lines of code with issue
  print-issued-lines: true

  # print linter name in the end of issue text
  print-linter-name: true
