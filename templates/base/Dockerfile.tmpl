# Multi-stage Dockerfile for {{.ProjectName}}
# Built with Go {{.Framework}} framework

# Build stage
FROM golang:1.21-alpine AS builder

# Install necessary packages
RUN apk add --no-cache git ca-certificates tzdata

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o main ./cmd/main.go

# Final stage
FROM alpine:3.18

# Install ca-certificates for HTTPS requests
RUN apk --no-cache add ca-certificates tzdata

# Create non-root user
RUN addgroup -g 1001 -S {{.ProjectName}} && \
    adduser -u 1001 -S {{.ProjectName}} -G {{.ProjectName}}

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/main .

# Copy static files if they exist
COPY --from=builder /app/static ./static/ 2>/dev/null || true

# Copy config files if they exist
COPY --from=builder /app/config ./config/ 2>/dev/null || true

# Change ownership
RUN chown -R {{.ProjectName}}:{{.ProjectName}} /app

# Switch to non-root user
USER {{.ProjectName}}

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Run the application
ENTRYPOINT ["./main"]
