package handlers

import (
	"encoding/json"
	"net/http"
	"strconv"
	
	"{{.ModulePath}}/models"
	"{{.ModulePath}}/services"

	{{- if eq .Database "postgresql" }}
	"github.com/google/uuid"
	{{- end}}
	
	// --- Import dinamis berdasarkan framework ---
	{{- if eq .Framework "Fiber" }}
	"github.com/gofiber/fiber/v2"
	{{- else if eq .Framework "Gin" }}
	"github.com/gin-gonic/gin"
	{{- else if eq .Framework "Chi" }}
	"github.com/go-chi/chi/v5"
	{{- else if eq .Framework "Echo" }}
	"github.com/labstack/echo/v4"
	{{- end}}
)

// Tipe ID dinamis berdasarkan pilihan database
{{- if eq .Database "postgresql" }}
type UserID = uuid.UUID
{{- else}}
type UserID = uint
{{- end}}

// UserHandler menangani request HTTP yang berhubungan dengan User.
type UserHandler struct {
	userService services.UserService
}

// NewUserHandler membuat instance baru dari UserHandler.
func NewUserHandler(userService services.UserService) *UserHandler {
	return &UserHandler{userService: userService}
}


{{/* --- =================== BLOK KODE UNTUK GO FIBER =================== --- */}}
{{- if eq .Framework "Fiber" }}

// CreateUser menangani request POST untuk membuat user baru.
func (h *UserHandler) CreateUser(c *fiber.Ctx) error {
	var req models.CreateUserRequest
	if err := c.BodyParser(&req); err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request body: " + err.Error()})
	}

	user, err := h.userService.CreateUser(c.Context(), &req)
	if err != nil {
		// Di sini kita bisa memeriksa tipe error untuk memberikan status code yang lebih baik
		return c.Status(fiber.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
	}
	return c.Status(fiber.StatusCreated).JSON(user)
}

// GetUsers menangani request GET untuk mendapatkan daftar user dengan paginasi.
func (h *UserHandler) GetUsers(c *fiber.Ctx) error {
	page, _ := strconv.Atoi(c.Query("page", "1"))
	perPage, _ := strconv.Atoi(c.Query("per_page", "10"))
	
	response, err := h.userService.GetAllUsers(c.Context(), page, perPage)
	if err != nil {
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
	}
	return c.JSON(response)
}

// GetUser menangani request GET untuk mendapatkan satu user berdasarkan ID.
func (h *UserHandler) GetUser(c *fiber.Ctx) error {
	id, err := parseUserID(c.Params("id"))
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid user ID format"})
	}

	user, err := h.userService.GetUserByID(c.Context(), id)
	if err != nil {
		return c.Status(http.StatusNotFound).JSON(fiber.Map{"error": err.Error()})
	}
	return c.JSON(user)
}

// UpdateUser menangani request PUT untuk memperbarui data user.
func (h *UserHandler) UpdateUser(c *fiber.Ctx) error {
	id, err := parseUserID(c.Params("id"))
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid user ID format"})
	}

	var req models.UpdateUserRequest
	if err := c.BodyParser(&req); err != nil {
		return c.Status(http.StatusBadRequest).JSON(fiber.Map{"error": "Invalid request body: " + err.Error()})
	}

	user, err := h.userService.UpdateUser(c.Context(), id, &req)
	if err != nil {
		return c.Status(http.StatusInternalServerError).JSON(fiber.Map{"error": err.Error()})
	}
	return c.JSON(user)
}

// DeleteUser menangani request DELETE untuk menghapus user.
func (h *UserHandler) DeleteUser(c *fiber.Ctx) error {
	id, err := parseUserID(c.Params("id"))
	if err != nil {
		return c.Status(fiber.StatusBadRequest).JSON(fiber.Map{"error": "Invalid user ID format"})
	}

	if err := h.userService.DeleteUser(c.Context(), id); err != nil {
		return c.Status(http.StatusNotFound).JSON(fiber.Map{"error": err.Error()})
	}
	return c.SendStatus(fiber.StatusNoContent)
}

{{- end }}


{{/* --- =================== BLOK KODE UNTUK GIN =================== --- */}}
{{- if eq .Framework "Gin" }}

// CreateUser menangani request POST untuk membuat user baru.
func (h *UserHandler) CreateUser(c *gin.Context) {
	var req models.CreateUserRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request body: " + err.Error()})
		return
	}

	user, err := h.userService.CreateUser(c.Request.Context(), &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusCreated, user)
}

// GetUsers menangani request GET untuk mendapatkan daftar user dengan paginasi.
func (h *UserHandler) GetUsers(c *gin.Context) {
	page, _ := strconv.Atoi(c.DefaultQuery("page", "1"))
	perPage, _ := strconv.Atoi(c.DefaultQuery("per_page", "10"))

	response, err := h.userService.GetAllUsers(c.Request.Context(), page, perPage)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, response)
}

// GetUser menangani request GET untuk mendapatkan satu user berdasarkan ID.
func (h *UserHandler) GetUser(c *gin.Context) {
	id, err := parseUserID(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID format"})
		return
	}

	user, err := h.userService.GetUserByID(c.Request.Context(), id)
	if err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, user)
}

// UpdateUser menangani request PUT untuk memperbarui data user.
func (h *UserHandler) UpdateUser(c *gin.Context) {
	id, err := parseUserID(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID format"})
		return
	}

	var req models.UpdateUserRequest
	if err := c.ShouldBindJSON(&req); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request body: " + err.Error()})
		return
	}

	user, err := h.userService.UpdateUser(c.Request.Context(), id, &req)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}
	c.JSON(http.StatusOK, user)
}

// DeleteUser menangani request DELETE untuk menghapus user.
func (h *UserHandler) DeleteUser(c *gin.Context) {
	id, err := parseUserID(c.Param("id"))
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid user ID format"})
		return
	}

	if err := h.userService.DeleteUser(c.Request.Context(), id); err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": err.Error()})
		return
	}
	c.Status(http.StatusNoContent)
}

{{- end }}


{{/* --- =================== BLOK KODE UNTUK CHI =================== --- */}}
{{- if eq .Framework "Chi" }}

// CreateUser menangani request POST untuk membuat user baru.
func (h *UserHandler) CreateUser(w http.ResponseWriter, r *http.Request) {
	var req models.CreateUserRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid request body: "+err.Error(), http.StatusBadRequest)
		return
	}

	user, err := h.userService.CreateUser(r.Context(), &req)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusCreated)
	json.NewEncoder(w).Encode(user)
}

// GetUsers menangani request GET untuk mendapatkan daftar user dengan paginasi.
func (h *UserHandler) GetUsers(w http.ResponseWriter, r *http.Request) {
	page, _ := strconv.Atoi(r.URL.Query().Get("page"))
	if page == 0 { page = 1 }
	perPage, _ := strconv.Atoi(r.URL.Query().Get("per_page"))
	if perPage == 0 { perPage = 10 }
	
	response, err := h.userService.GetAllUsers(r.Context(), page, perPage)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(response)
}

// GetUser menangani request GET untuk mendapatkan satu user berdasarkan ID.
func (h *UserHandler) GetUser(w http.ResponseWriter, r *http.Request) {
	id, err := parseUserID(chi.URLParam(r, "id"))
	if err != nil {
		http.Error(w, "Invalid user ID format", http.StatusBadRequest)
		return
	}

	user, err := h.userService.GetUserByID(r.Context(), id)
	if err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(user)
}

// UpdateUser menangani request PUT untuk memperbarui data user.
func (h *UserHandler) UpdateUser(w http.ResponseWriter, r *http.Request) {
	id, err := parseUserID(chi.URLParam(r, "id"))
	if err != nil {
		http.Error(w, "Invalid user ID format", http.StatusBadRequest)
		return
	}

	var req models.UpdateUserRequest
	if err := json.NewDecoder(r.Body).Decode(&req); err != nil {
		http.Error(w, "Invalid request body: "+err.Error(), http.StatusBadRequest)
		return
	}

	user, err := h.userService.UpdateUser(r.Context(), id, &req)
	if err != nil {
		http.Error(w, err.Error(), http.StatusInternalServerError)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	json.NewEncoder(w).Encode(user)
}

// DeleteUser menangani request DELETE untuk menghapus user.
func (h *UserHandler) DeleteUser(w http.ResponseWriter, r *http.Request) {
	id, err := parseUserID(chi.URLParam(r, "id"))
	if err != nil {
		http.Error(w, "Invalid user ID format", http.StatusBadRequest)
		return
	}

	if err := h.userService.DeleteUser(r.Context(), id); err != nil {
		http.Error(w, err.Error(), http.StatusNotFound)
		return
	}
	w.WriteHeader(http.StatusNoContent)
}

{{- end }}


{{/* --- =================== BLOK KODE UNTUK ECHO =================== --- */}}
{{- if eq .Framework "Echo" }}

// CreateUser menangani request POST untuk membuat user baru.
func (h *UserHandler) CreateUser(c echo.Context) error {
	var req models.CreateUserRequest
	if err := c.Bind(&req); err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid request body: " + err.Error()})
	}

	user, err := h.userService.CreateUser(c.Request().Context(), &req)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}
	return c.JSON(http.StatusCreated, user)
}

// GetUsers menangani request GET untuk mendapatkan daftar user dengan paginasi.
func (h *UserHandler) GetUsers(c echo.Context) error {
	page, _ := strconv.Atoi(c.QueryParam("page"))
	if page == 0 { page = 1 }
	perPage, _ := strconv.Atoi(c.QueryParam("per_page"))
	if perPage == 0 { perPage = 10 }
	
	response, err := h.userService.GetAllUsers(c.Request().Context(), page, perPage)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}
	return c.JSON(http.StatusOK, response)
}

// GetUser menangani request GET untuk mendapatkan satu user berdasarkan ID.
func (h *UserHandler) GetUser(c echo.Context) error {
	id, err := parseUserID(c.Param("id"))
	if err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid user ID format"})
	}

	user, err := h.userService.GetUserByID(c.Request().Context(), id)
	if err != nil {
		return c.JSON(http.StatusNotFound, map[string]string{"error": err.Error()})
	}
	return c.JSON(http.StatusOK, user)
}

// UpdateUser menangani request PUT untuk memperbarui data user.
func (h *UserHandler) UpdateUser(c echo.Context) error {
	id, err := parseUserID(c.Param("id"))
	if err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid user ID format"})
	}

	var req models.UpdateUserRequest
	if err := c.Bind(&req); err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid request body: " + err.Error()})
	}

	user, err := h.userService.UpdateUser(c.Request().Context(), id, &req)
	if err != nil {
		return c.JSON(http.StatusInternalServerError, map[string]string{"error": err.Error()})
	}
	return c.JSON(http.StatusOK, user)
}

// DeleteUser menangani request DELETE untuk menghapus user.
func (h *UserHandler) DeleteUser(c echo.Context) error {
	id, err := parseUserID(c.Param("id"))
	if err != nil {
		return c.JSON(http.StatusBadRequest, map[string]string{"error": "Invalid user ID format"})
	}

	if err := h.userService.DeleteUser(c.Request().Context(), id); err != nil {
		return c.JSON(http.StatusNotFound, map[string]string{"error": err.Error()})
	}
	return c.NoContent(http.StatusNoContent)
}

{{- end }}


// parseUserID adalah helper untuk mengurai ID dari string, beradaptasi dengan tipe database.
func parseUserID(idStr string) (UserID, error) {
	{{if eq .Database "postgresql" }}
	id, err := uuid.Parse(idStr)
	return id, err
	{{else}}
	id, err := strconv.ParseUint(idStr, 10, 32)
	return uint(id), err
	{{end}}
}