package main

import (
	"log"

	"{{.ModulePath}}/internal/config"
	"{{.ModulePath}}/internal/database"
	"{{.ModulePath}}/internal/models"
	"gorm.io/gorm"
)

func main() {
	// Load configuration
	cfg, err := config.Load()
	if err != nil {
		log.Fatalf("Failed to load configuration: %v", err)
	}

	// Connect to database
	db, err := database.Connect(cfg.Database)
	if err != nil {
		log.Fatalf("Failed to connect to database: %v", err)
	}

	// Get underlying SQL DB for cleanup
	sqlDB, err := db.DB()
	if err != nil {
		log.Fatalf("Failed to get underlying sql.DB: %v", err)
	}
	defer sqlDB.Close()

	// Run migrations
	if err := runMigrations(db); err != nil {
		log.Fatalf("Failed to run migrations: %v", err)
	}

	log.Println("Migrations completed successfully!")
}

// runMigrations performs auto-migration for all models
func runMigrations(db *gorm.DB) error {
	log.Println("Running database migrations...")

	// Auto-migrate all models
	err := db.AutoMigrate(
		&models.User{},
		&models.UserProfile{},
		&models.Post{},
		&models.Tag{},
		&models.Comment{},
		&models.Category{},
		&models.Setting{},
		&models.AuditLog{},
	)
	if err != nil {
		return err
	}

	log.Println("Auto-migration completed")

	// Create indexes
	if err := createIndexes(db); err != nil {
		return err
	}

	// Seed default data
	if err := seedData(db); err != nil {
		return err
	}

	return nil
}

// createIndexes creates additional indexes that are not handled by auto-migration
func createIndexes(db *gorm.DB) error {
	log.Println("Creating additional indexes...")

	// Create composite indexes
	indexes := []string{
		"CREATE INDEX IF NOT EXISTS idx_users_email_active ON users(email, active) WHERE deleted_at IS NULL",
		"CREATE INDEX IF NOT EXISTS idx_posts_user_published ON posts(user_id, published, published_at) WHERE deleted_at IS NULL",
		"CREATE INDEX IF NOT EXISTS idx_posts_slug_published ON posts(slug, published) WHERE deleted_at IS NULL",
		"CREATE INDEX IF NOT EXISTS idx_comments_post_approved ON comments(post_id, approved) WHERE deleted_at IS NULL",
		"CREATE INDEX IF NOT EXISTS idx_comments_parent_id ON comments(parent_id) WHERE parent_id IS NOT NULL AND deleted_at IS NULL",
		"CREATE INDEX IF NOT EXISTS idx_categories_parent_id ON categories(parent_id) WHERE parent_id IS NOT NULL AND deleted_at IS NULL",
		"CREATE INDEX IF NOT EXISTS idx_audit_logs_user_action ON audit_logs(user_id, action, created_at)",
		"CREATE INDEX IF NOT EXISTS idx_audit_logs_resource ON audit_logs(resource, resource_id, created_at)",
	}

	for _, index := range indexes {
		if err := db.Exec(index).Error; err != nil {
			log.Printf("Warning: Failed to create index: %v", err)
			// Continue with other indexes even if one fails
		}
	}

	log.Println("Indexes created successfully")
	return nil
}

// seedData inserts default/seed data into the database
func seedData(db *gorm.DB) error {
	log.Println("Seeding default data...")

	// Seed default settings
	defaultSettings := []models.Setting{
		{Key: "site_name", Value: "{{.ProjectName | title}}", Type: "string"},
		{Key: "site_description", Value: "{{.Config.ProjectDetails.Description | default "A modern web application built with Go"}}", Type: "string"},
		{Key: "site_version", Value: "{{.Config.ProjectDetails.Version | default "1.0.0"}}", Type: "string"},
		{Key: "maintenance_mode", Value: "false", Type: "bool"},
		{Key: "user_registration_enabled", Value: "true", Type: "bool"},
		{Key: "posts_per_page", Value: "10", Type: "int"},
		{Key: "comments_enabled", Value: "true", Type: "bool"},
		{Key: "comment_moderation", Value: "true", Type: "bool"},
		{Key: "max_upload_size", Value: "10485760", Type: "int"},
		{Key: "allowed_file_types", Value: `["jpg","jpeg","png","gif","pdf"]`, Type: "json"},
	}

	for _, setting := range defaultSettings {
		var existingSetting models.Setting
		if err := db.Where("key = ?", setting.Key).First(&existingSetting).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				// Setting doesn't exist, create it
				if err := db.Create(&setting).Error; err != nil {
					log.Printf("Warning: Failed to create setting %s: %v", setting.Key, err)
				} else {
					log.Printf("Created setting: %s", setting.Key)
				}
			} else {
				log.Printf("Warning: Error checking setting %s: %v", setting.Key, err)
			}
		} else {
			log.Printf("Setting %s already exists, skipping", setting.Key)
		}
	}

	// Seed default categories
	defaultCategories := []models.Category{
		{Name: "General", Slug: "general", Description: "General topics and discussions"},
		{Name: "Technology", Slug: "technology", Description: "Technology-related content"},
		{Name: "News", Slug: "news", Description: "Latest news and updates"},
		{Name: "Tutorials", Slug: "tutorials", Description: "How-to guides and tutorials"},
	}

	for _, category := range defaultCategories {
		var existingCategory models.Category
		if err := db.Where("slug = ?", category.Slug).First(&existingCategory).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				// Category doesn't exist, create it
				if err := db.Create(&category).Error; err != nil {
					log.Printf("Warning: Failed to create category %s: %v", category.Name, err)
				} else {
					log.Printf("Created category: %s", category.Name)
				}
			} else {
				log.Printf("Warning: Error checking category %s: %v", category.Name, err)
			}
		} else {
			log.Printf("Category %s already exists, skipping", category.Name)
		}
	}

	// Seed default tags
	defaultTags := []models.Tag{
		{Name: "Getting Started", Slug: "getting-started", Description: "Beginner-friendly content", Color: "#007bff"},
		{Name: "Tutorial", Slug: "tutorial", Description: "Step-by-step guides", Color: "#28a745"},
		{Name: "Tips", Slug: "tips", Description: "Quick tips and tricks", Color: "#ffc107"},
		{Name: "Advanced", Slug: "advanced", Description: "Advanced topics", Color: "#dc3545"},
		{Name: "Best Practices", Slug: "best-practices", Description: "Industry best practices", Color: "#6f42c1"},
	}

	for _, tag := range defaultTags {
		var existingTag models.Tag
		if err := db.Where("slug = ?", tag.Slug).First(&existingTag).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				// Tag doesn't exist, create it
				if err := db.Create(&tag).Error; err != nil {
					log.Printf("Warning: Failed to create tag %s: %v", tag.Name, err)
				} else {
					log.Printf("Created tag: %s", tag.Name)
				}
			} else {
				log.Printf("Warning: Error checking tag %s: %v", tag.Name, err)
			}
		} else {
			log.Printf("Tag %s already exists, skipping", tag.Name)
		}
	}

	// Create admin user (optional)
	adminEmail := "admin@{{.ProjectName | kebabCase}}.com"
	var adminUser models.User
	if err := db.Where("email = ?", adminEmail).First(&adminUser).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			// Admin user doesn't exist, create it
			adminUser = models.User{
				Name:     "Administrator",
				Email:    adminEmail,
				Password: "hashed_password_here", // Remember to hash passwords in real implementation
				Active:   true,
			}

			if err := db.Create(&adminUser).Error; err != nil {
				log.Printf("Warning: Failed to create admin user: %v", err)
			} else {
				log.Printf("Created admin user: %s", adminEmail)

				// Create admin profile
				adminProfile := models.UserProfile{
					UserID:    adminUser.ID,
					FirstName: "System",
					LastName:  "Administrator",
					Bio:       "System administrator account",
				}

				if err := db.Create(&adminProfile).Error; err != nil {
					log.Printf("Warning: Failed to create admin profile: %v", err)
				}
			}
		}
	} else {
		log.Printf("Admin user already exists, skipping")
	}

	log.Println("Default data seeded successfully")
	return nil
}

// dropTables drops all tables (use with caution!)
func dropTables(db *gorm.DB) error {
	log.Println("WARNING: Dropping all tables...")

	// Drop tables in reverse order to avoid foreign key constraints
	tables := []interface{}{
		&models.AuditLog{},
		&models.Setting{},
		&models.Comment{},
		&models.Category{},
		&models.Tag{},
		&models.Post{},
		&models.UserProfile{},
		&models.User{},
	}

	for _, table := range tables {
		if err := db.Migrator().DropTable(table); err != nil {
			log.Printf("Warning: Failed to drop table %T: %v", table, err)
		}
	}

	// Drop junction tables
	junctionTables := []string{"post_tags"}
	for _, table := range junctionTables {
		if err := db.Exec("DROP TABLE IF EXISTS " + table).Error; err != nil {
			log.Printf("Warning: Failed to drop junction table %s: %v", table, err)
		}
	}

	log.Println("Tables dropped successfully")
	return nil
}

// resetDatabase drops and recreates all tables
func resetDatabase(db *gorm.DB) error {
	log.Println("Resetting database...")

	if err := dropTables(db); err != nil {
		return err
	}

	if err := runMigrations(db); err != nil {
		return err
	}

	log.Println("Database reset completed successfully")
	return nil
}
