package routes

import (
	"net/http"

	"{{.ModulePath}}/internal/config"
{{- if eq .Architecture "simple"}}
	"{{.ModulePath}}/internal/handlers"
{{- else if eq .Architecture "ddd"}}
	"{{.ModulePath}}/internal/interfaces/http"
{{- else if eq .Architecture "clean"}}
	"{{.ModulePath}}/internal/frameworks_drivers/web"
{{- else if eq .Architecture "hexagonal"}}
	"{{.ModulePath}}/internal/adapters/input/http"
{{- end}}

	"github.com/gin-gonic/gin"
{{- if eq .ORM "gorm"}}
	"gorm.io/gorm"
{{- else if eq .ORM "sqlx"}}
	"github.com/jmoiron/sqlx"
{{- else if eq .ORM "sqlc"}}
	"database/sql"
{{- end}}
)

{{- if eq .Architecture "simple"}}
// Dependencies holds all the dependencies needed by the routes
type Dependencies struct {
{{- if eq .ORM "gorm"}}
	DB     *gorm.DB
{{- else if eq .ORM "sqlx"}}
	DB     *sqlx.DB
{{- else if eq .ORM "sqlc"}}
	DB     *sql.DB
{{- end}}
	Config *config.Config
}

// Setup configures all the routes
func Setup(router *gin.Engine, deps *Dependencies) {
	// Health check endpoint
	router.GET("/health", healthCheck)

	// API version 1 routes
	v1 := router.Group("/api/v1")
	{
		// Initialize handlers
		healthHandler := handlers.NewHealthHandler()
		userHandler := handlers.NewUserHandler(deps.DB, deps.Config)

		// Health routes
		v1.GET("/health", healthHandler.Check)
		v1.GET("/ready", healthHandler.Ready)

		// User routes
		users := v1.Group("/users")
		{
			users.GET("", userHandler.GetUsers)
			users.GET("/:id", userHandler.GetUser)
			users.POST("", userHandler.CreateUser)
			users.PUT("/:id", userHandler.UpdateUser)
			users.DELETE("/:id", userHandler.DeleteUser)
		}

		// Example protected routes (if authentication is implemented)
		// protected := v1.Group("/protected")
		// protected.Use(middleware.AuthRequired())
		// {
		//     protected.GET("/profile", userHandler.GetProfile)
		// }
	}

	// Serve static files (optional)
	// router.Static("/static", "./web/static")
	// router.StaticFile("/favicon.ico", "./web/static/favicon.ico")

	// Catch-all route for undefined endpoints
	router.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "Route not found",
			"path":  c.Request.URL.Path,
		})
	})
}

{{- else if eq .Architecture "ddd"}}
// Setup configures all the routes with DDD structure
func Setup(router *gin.Engine, handler *http.Handler) {
	// Health check endpoint
	router.GET("/health", healthCheck)

	// API version 1 routes
	v1 := router.Group("/api/v1")
	{
		// Health routes
		v1.GET("/health", handler.HealthCheck)
		v1.GET("/ready", handler.ReadyCheck)

		// User routes
		users := v1.Group("/users")
		{
			users.GET("", handler.GetUsers)
			users.GET("/:id", handler.GetUser)
			users.POST("", handler.CreateUser)
			users.PUT("/:id", handler.UpdateUser)
			users.DELETE("/:id", handler.DeleteUser)
		}
	}

	// Catch-all route
	router.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "Route not found",
			"path":  c.Request.URL.Path,
		})
	})
}

{{- else if eq .Architecture "clean"}}
// Setup configures all the routes with Clean Architecture
func Setup(webFramework *web.GinFramework, db interface{}, cfg *config.Config) {
	router := webFramework.GetRouter()

	// Health check endpoint
	router.GET("/health", healthCheck)

	// API version 1 routes
	v1 := router.Group("/api/v1")
	{
		// Setup controllers
		webFramework.SetupControllers(v1, db, cfg)
	}

	// Catch-all route
	router.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "Route not found",
			"path":  c.Request.URL.Path,
		})
	})
}

{{- else if eq .Architecture "hexagonal"}}
// Setup configures all the routes with Hexagonal Architecture
func Setup(router *gin.Engine, adapter *http.Adapter) {
	// Health check endpoint
	router.GET("/health", healthCheck)

	// API version 1 routes
	v1 := router.Group("/api/v1")
	{
		// Health routes
		v1.GET("/health", adapter.HealthCheck)
		v1.GET("/ready", adapter.ReadyCheck)

		// User routes
		users := v1.Group("/users")
		{
			users.GET("", adapter.GetUsers)
			users.GET("/:id", adapter.GetUser)
			users.POST("", adapter.CreateUser)
			users.PUT("/:id", adapter.UpdateUser)
			users.DELETE("/:id", adapter.DeleteUser)
		}
	}

	// Catch-all route
	router.NoRoute(func(c *gin.Context) {
		c.JSON(http.StatusNotFound, gin.H{
			"error": "Route not found",
			"path":  c.Request.URL.Path,
		})
	})
}
{{- end}}

// healthCheck is a simple health check endpoint
func healthCheck(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{
		"status":  "ok",
		"service": "{{.ProjectName}}",
		"version": "1.0.0",
	})
}
